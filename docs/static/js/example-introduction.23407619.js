(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{"./dist/index.js":function(e,a,t){"use strict";e.exports=t("./dist/tiny-mobx-form.cjs.production.min.js")},"./dist/tiny-mobx-form.cjs.production.min.js":function(e,a,t){"use strict";var i=t("./node_modules/tslib/tslib.es6.js"),n=t("./node_modules/mobx/lib/mobx.module.js");function l(e,a){for(var t=0;t<a.length;t++){var i=a[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function r(e,a,t){return a&&l(e.prototype,a),t&&l(e,t),e}function o(){return(o=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e}).apply(this,arguments)}var s=function(e,a){return void 0===a&&(a=""),e?a:void 0},d=function(e){return s(!e.value,"This field is required.")},m=function(e,a){return s(!(e.value&&e.form.fields[a]),"The "+e.form.fields[a].label+" field is required since the "+e.label+" field is filled out.")},c=function(e,a,t){return void 0===a&&(a=0),void 0===t&&(t=1/0),s(!(e.value&&e.value.length>=Number(a)&&e.value.length<=Number(t)),function(e,a){return"Must be at least "+e+" and no more than "+a+" characters"}(a.toString(10),t.toString(10)))},A=function(e,a){return s(e.value!==e.form.fields[a].value,"The "+e.label+" and "+e.form.fields[a].label+" do not match.")},b=/^[a-zA-Z\s]*$/,u=function(e){var a=e.value;return s(!!a&&!b.test(a),"Please enter letters only.")},p=/^[\w-.]+@([\w-]+\.)+[\w-]{2,4}$/,h=function(e){var a=e.value;return s(!!a&&!p.test(a),"Please enter a valid email address.")},g=/^(\()?[2-9]\d{2}(-|.|\))?\d{3}(-|.)?\d{4}$/,j=function(e){var a=e.value;return s(!!a&&!g.test(a),"Please enter a valid phone number.")},O=/^\d{5}-\d{4}|\d{5}|[A-Z]\d[A-Z] \d[A-Z]\d$/,N=function(e){var a=e.value;return s(!!a&&!O.test(a),"Please enter a valid postal number.")},B=/^\d+$/,f=function(e){var a=e.value;return s(!!a&&!B.test(a),"Please enter a valid number.")},w=/^\w+$/,D=function(e){var a=e.value;return s(!!a&&!w.test(a),"Please do not use special characters.")},v=function(e,a,t){var i=e.value;return void 0===a&&(a=0),void 0===t&&(t=1/0),s(!(!i||Number(i)>=a&&Number(i)<=t),function(e,a){return"Please enter a number between "+e+" and "+a+"."}(a.toString(10),t.toString(10)))},C=function(e){for(var a=e.value,t=arguments.length,i=new Array(t>1?t-1:0),n=1;n<t;n++)i[n-1]=arguments[n];return s(!!a&&!i.includes(a),function(e){return"Please choose one of these choices: "+e.join(", ")}(i))},y=function(e){return void 0===e&&(e={}),o({required:d,"required-if":m,length:c,letters:u,email:h,match:A,number:f,phone:j,postal:N,alpha:D,size:v,"one-of":C},e)},Q=function(){function e(e,a,t){var i=a.name,n=a.label,l=void 0===n?"":n,r=a.placeholder,o=void 0===r?"":r,s=a.validation,d=void 0===s?"":s,m=a.initialValue,c=void 0===m?"":m;this.form=e,this.validators=t,this.isTouched=!1,this.name=i,this.label=l,this.placeholder=o,this.initialValue=c,this._value=c,this.validation=d}return e.prototype.reset=function(){this._value=this.initialValue,this.isTouched=!1},r(e,[{key:"value",get:function(){return this._value},set:function(e){this._value=e,this.isTouched=!0}},{key:"isValid",get:function(){return 0===this.errors.length}},{key:"isDirty",get:function(){return this.initialValue!==this.value}},{key:"errors",get:function(){return a=this.validators,(e=this).validation.split("|").map((function(t){var i=t.split(":"),n=i[0],l=i[1],r=[];if(l&&(r=l.split(",")),!(n in a))throw new Error("There is no validator with the name of "+n);return a[n].apply(a,[e].concat(r))})).filter(Boolean);var e,a}},{key:"hasErrors",get:function(){return this.errors.length>0}}]),e}();i.__decorate([n.observable],Q.prototype,"initialValue",void 0),i.__decorate([n.observable],Q.prototype,"_value",void 0),i.__decorate([n.observable],Q.prototype,"isTouched",void 0),i.__decorate([n.observable],Q.prototype,"validation",void 0),i.__decorate([n.computed],Q.prototype,"value",null),i.__decorate([n.computed],Q.prototype,"isValid",null),i.__decorate([n.computed],Q.prototype,"isDirty",null),i.__decorate([n.computed],Q.prototype,"errors",null),i.__decorate([n.computed],Q.prototype,"hasErrors",null),i.__decorate([n.action("TinyMobxForm | Field | reset")],Q.prototype,"reset",null);var E=function(){function e(e,a,t){var i=this;void 0===a&&(a={}),void 0===t&&(t={additionalValidators:{}}),this.fieldNames=[],this.fields={},e.forEach((function(e){i.fieldNames.push(e.name);var n=o({},e,{initialValue:a[e.name]||e.initialValue});i.fields[n.name]=new Q(i,n,y(t.additionalValidators))}))}var a=e.prototype;return a.showErrors=function(){var e=this;this.fieldNames.forEach((function(a){e.fields[a].isTouched=!0}))},a.reset=function(){var e=this;this.fieldNames.forEach((function(a){return e.fields[a].reset()}))},r(e,[{key:"isValid",get:function(){var e=this;return 0===this.fieldNames.filter((function(a){return!e.fields[a].isValid})).length}},{key:"errors",get:function(){var e=this;return this.fieldNames.flatMap((function(a){return e.fields[a].errors}))}},{key:"isDirty",get:function(){var e=this;return this.fieldNames.some((function(a){return e.fields[a].isDirty}))}},{key:"values",get:function(){var e=this;return this.fieldNames.reduce((function(a,t){var i;return o({},a,((i={})[t]=e.fields[t].value,i))}),{})}}]),e}();i.__decorate([n.observable],E.prototype,"fieldNames",void 0),i.__decorate([n.observable.struct],E.prototype,"fields",void 0),i.__decorate([n.computed],E.prototype,"isValid",null),i.__decorate([n.computed],E.prototype,"errors",null),i.__decorate([n.computed],E.prototype,"isDirty",null),i.__decorate([n.computed],E.prototype,"values",null),i.__decorate([n.action("TinyMobxForm | showErrors")],E.prototype,"showErrors",null),i.__decorate([n.action("TinyMobxForm | reset")],E.prototype,"reset",null),a.Field=Q,a.Form=E},"./example/introduction.mdx":function(e,a,t){"use strict";t.r(a);var i=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),n=t("./node_modules/react/index.js"),l=t.n(n),r=t("./node_modules/@mdx-js/react/dist/index.es.js"),o=t("./node_modules/docz/dist/index.esm.js"),s=(t("./example/styles.css"),t("./node_modules/mobx-react/dist/mobx-react.module.js")),d=t("./node_modules/evergreen-ui/esm/text-input/src/TextInputField.js"),m=t("./dist/index.js"),c=new m.Form([{name:"firstName",placeholder:"John",label:"First Name",validation:"required|letters|length:2,20",initialValue:""},{name:"lastName",placeholder:"Appleseed",label:"Last Name",validation:"required|letters|length:2,20",initialValue:""},{name:"email",placeholder:"jon@gmail.com",label:"Email",validation:"required|email",initialValue:""},{name:"age",placeholder:"22",label:"Age",validation:"required|number|size:18,100",initialValue:""}]).fields;var A=Object(s.a)((function(){return l.a.createElement("div",null,l.a.createElement("div",null,l.a.createElement(d.a,{required:!0,type:"text",name:"firstName",value:c.firstName.value,placeholder:c.firstName.placeholder,label:c.firstName.label,validationMessage:c.firstName.isDirty&&c.firstName.hasErrors&&c.firstName.errors.join(" "),isInvalid:c.firstName.isDirty&&c.firstName.hasErrors,onChange:function(e){return c.firstName.value=e.currentTarget.value}})),l.a.createElement("div",null,l.a.createElement(d.a,{required:!0,type:"text",name:"lastName",value:c.lastName.value,placeholder:c.lastName.placeholder,label:c.lastName.label,validationMessage:c.lastName.isDirty&&c.lastName.hasErrors&&c.lastName.errors.join(" "),isInvalid:c.lastName.isDirty&&c.lastName.hasErrors,onChange:function(e){return c.lastName.value=e.currentTarget.value}})),l.a.createElement("div",null,l.a.createElement(d.a,{required:!0,type:"text",name:"email",value:c.email.value,placeholder:c.email.placeholder,label:c.email.label,validationMessage:c.email.isDirty&&c.email.hasErrors&&c.email.errors.join(" "),isInvalid:c.email.isDirty&&c.email.hasErrors,onChange:function(e){return c.email.value=e.currentTarget.value}})),l.a.createElement("div",null,l.a.createElement(d.a,{required:!0,type:"text",name:"age",value:c.age.value,placeholder:c.age.placeholder,label:c.age.label,validationMessage:c.age.isDirty&&c.age.hasErrors&&c.age.errors.join(" "),isInvalid:c.age.isDirty&&c.age.hasErrors,onChange:function(e){return c.age.value=e.currentTarget.value},error:c.age.isDirty&&c.age.hasErrors&&c.age.errors.join(" ")})))})),b=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js"),u=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js"),p=new m.Form([{name:"firstName",placeholder:"John",label:"First Name",validation:"required|letters|length:2,20",initialValue:""},{name:"lastName",placeholder:"Appleseed",label:"Last Name",validation:"required|letters|length:2,20",initialValue:""},{name:"email",placeholder:"jon@gmail.com",label:"Email",validation:"required|email",initialValue:""},{name:"age",placeholder:"22",label:"Age",validation:"required|number|size:18,100",initialValue:""}]).fields;var h=Object(s.a)((function(){var e=Object(n.useState)([]),a=Object(u.a)(e,2),t=a[0],i=a[1];return l.a.createElement("div",null,l.a.createElement("div",null,l.a.createElement(d.a,{required:!0,type:"text",name:"firstName",value:p.firstName.value,placeholder:p.firstName.placeholder,label:p.firstName.label,validationMessage:t.includes("firstName")&&p.firstName.hasErrors&&p.firstName.errors.join(" "),onBlur:function(){return i([].concat(Object(b.a)(t),["firstName"]))},isInvalid:t.includes("firstName")&&p.firstName.hasErrors,onChange:function(e){return p.firstName.value=e.currentTarget.value}})),l.a.createElement("div",null,l.a.createElement(d.a,{required:!0,type:"text",name:"lastName",value:p.lastName.value,placeholder:p.lastName.placeholder,label:p.lastName.label,validationMessage:t.includes("lastName")&&p.lastName.hasErrors&&p.lastName.errors.join(" "),onBlur:function(){return i([].concat(Object(b.a)(t),["lastName"]))},isInvalid:t.includes("lastName")&&p.lastName.hasErrors,onChange:function(e){return p.lastName.value=e.currentTarget.value}})),l.a.createElement("div",null,l.a.createElement(d.a,{required:!0,type:"text",name:"email",value:p.email.value,placeholder:p.email.placeholder,label:p.email.label,validationMessage:t.includes("email")&&p.email.hasErrors&&p.email.errors.join(" "),onBlur:function(){return i([].concat(Object(b.a)(t),["email"]))},isInvalid:t.includes("email")&&p.email.hasErrors,onChange:function(e){return p.email.value=e.currentTarget.value}})),l.a.createElement("div",null,l.a.createElement(d.a,{required:!0,type:"text",name:"age",value:p.age.value,placeholder:p.age.placeholder,label:p.age.label,validationMessage:t.includes("age")&&p.age.hasErrors&&p.age.errors.join(" "),onBlur:function(){return i([].concat(Object(b.a)(t),["age"]))},isInvalid:t.includes("age")&&p.age.hasErrors,onChange:function(e){return p.age.value=e.currentTarget.value},error:p.age.isDirty&&p.age.hasErrors&&p.age.errors.join(" ")})))}));t.d(a,"default",(function(){return O}));var g={},j="wrapper";function O(e){var a=e.components,t=Object(i.a)(e,["components"]);return Object(r.b)(j,Object.assign({},g,t,{components:a,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"tiny-mobx-form"},"Tiny MobX Form"),Object(r.b)("h2",{id:""},Object(r.b)("a",Object.assign({parentName:"h2"},{href:"https://coveralls.io/github/dericgw/tiny-mobx-form?branch=master"}),Object(r.b)("img",{alt:"Coverage Status",src:"https://coveralls.io/repos/github/dericgw/tiny-mobx-form/badge.svg?branch=master"}))),Object(r.b)("p",null,"\u270c\ufe0fTiny (~2KB) tree-shakable MobX form library"),Object(r.b)("h2",{id:"features"},"Features"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Small, less than 2KB and tree-shakable"),Object(r.b)("li",{parentName:"ul"},"Written in TypeScript using MobX"),Object(r.b)("li",{parentName:"ul"},"Includes popular validations"),Object(r.b)("li",{parentName:"ul"},"Can add your own custom validations if needed")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"installation"},"Installation"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"npm i tiny-mobx-form")," or ",Object(r.b)("inlineCode",{parentName:"p"},"yarn add tiny-mobx-form")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"form"},Object(r.b)("inlineCode",{parentName:"h2"},"Form")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"Form")," class is the main module that makes tiny-mobx-form work. The ",Object(r.b)("inlineCode",{parentName:"p"},"Form")," takes an array of\nobjects that define a ",Object(r.b)("inlineCode",{parentName:"p"},"Field"),". Here are some of the things that the ",Object(r.b)("inlineCode",{parentName:"p"},"Form")," does:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Creates fields"),Object(r.b)("li",{parentName:"ul"},"Observes fields"),Object(r.b)("li",{parentName:"ul"},"Observes values"),Object(r.b)("li",{parentName:"ul"},"Observes whether the field has been touched (the value has been changed)"),Object(r.b)("li",{parentName:"ul"},"Validation"),Object(r.b)("li",{parentName:"ul"},"Validation errors")),Object(r.b)("h3",{id:"form-arguments"},Object(r.b)("inlineCode",{parentName:"h3"},"Form")," Arguments"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"Form")," accepts three arguments: ",Object(r.b)("inlineCode",{parentName:"p"},"new Form(fields, initialValues, options)"),":"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object.assign({parentName:"tr"},{align:null}),"Argument Name"),Object(r.b)("th",Object.assign({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object.assign({parentName:"tr"},{align:null}),"Required"),Object(r.b)("th",Object.assign({parentName:"tr"},{align:null}),"Default"),Object(r.b)("th",Object.assign({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"fields")),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"IFormSchema[]")),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"true"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null})),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"This is the definition of each field in the form. (See the ",Object(r.b)("inlineCode",{parentName:"td"},"IFormSchema")," type below)")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"initialValues")),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"{ fieldName: 'value' }")),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"false"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"{}")),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"These are the initial values for each form field.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"options")),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"IFormOptions")),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"false"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"{ additionalValidators: {} }")),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"These are extra options that can be passed into the form. (See the ",Object(r.b)("inlineCode",{parentName:"td"},"IFormOptions")," type below)")))),Object(r.b)("h4",{id:"fields-schema--iformschema"},"Fields Schema | ",Object(r.b)("inlineCode",{parentName:"h4"},"IFormSchema")),Object(r.b)("p",null,"Here is the shape of the ",Object(r.b)("inlineCode",{parentName:"p"},"IFormSchema")," type:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),'interface IFormSchema {\n  name: string; // The name of the field (must be unique)\n  label?: string; // The label of the field\n  placeholder?: string; // The placeholder of the input\n  validation?: string; // The validation string ("required|length:2.10|letters")\n  initialValue?: string; // The initial value of the field\n}\n')),Object(r.b)("p",null,"Here is an example of what that looks like:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const schema = [\n  {\n    name: 'firstName',\n    placeholder: 'John',\n    label: 'First Name',\n    validation: 'required|letters|length:2,20',\n    initialValue: '',\n  },\n  {\n    name: 'lastName',\n    placeholder: 'Appleseed',\n    label: 'Last Name',\n    validation: 'required|letters|length:2,20',\n    initialValue: '',\n  },\n  {\n    name: 'email',\n    placeholder: 'jon@gmail.com',\n    label: 'Email',\n    validation: 'required|email',\n    initialValue: '',\n  },\n  {\n    name: 'age',\n    placeholder: '22',\n    label: 'Age',\n    validation: 'required|number|size:18,100',\n    initialValue: '',\n  },\n];\n")),Object(r.b)("h4",{id:"form-initial-values"},"Form Initial Values"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"Form")," can accept initial values as a second argument. This is good to use when you need to query\nan API for the form values and you do not have the values at the time when the schema is created.\nThe ",Object(r.b)("inlineCode",{parentName:"p"},"initialValues")," is an object whose key is the name of the field and the value is the value of\nthat field. Here is an example:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const initialValues = {\n  firstName: 'Ted',\n  lastName: 'Chavez',\n  email: 'ted@email.com',\n  age: 31\n};\n")),Object(r.b)("h4",{id:"form-options--iformoptions"},"Form Options | ",Object(r.b)("inlineCode",{parentName:"h4"},"IFormOptions")),Object(r.b)("p",null,"Here is the ",Object(r.b)("inlineCode",{parentName:"p"},"IFormOptions")," type with the other dependent types. See the ",Object(r.b)("a",Object.assign({parentName:"p"},{href:"#validation"}),"Validation")," section for a\nbetter explanation of adding additional validators:"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Right now, there is only one option available, but there will be more in the future.")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"interface IFormOptions {\n  additionalValidators: IValidators;\n}\n\ninterface IValidators {\n  [name: string]: IValidator;\n}\n\ninterface IValidator {\n  (field: IField, ...args: any[]): undefined | string;\n}\n")),Object(r.b)("p",null,"Here is an example of what the options would look like:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const options = {\n  additionalValidators: {\n    'file-size': fileSizeValidator,\n    'date': dateValidator,\n  } \n};\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"See the ",Object(r.b)("a",Object.assign({parentName:"p"},{href:"#validation"}),"Validation")," section for more info on custom validators.")),Object(r.b)("h3",{id:"form-methods-and-properties"},Object(r.b)("inlineCode",{parentName:"h3"},"Form")," Methods and Properties"),Object(r.b)("p",null,"A ",Object(r.b)("inlineCode",{parentName:"p"},"Form")," instance has a few methods and properties available that should be used to work with the\nform. Here is the ",Object(r.b)("inlineCode",{parentName:"p"},"IForm")," interface in which the ",Object(r.b)("inlineCode",{parentName:"p"},"Form")," implements:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"interface IForm {\n  fields: IFields; // These are the fields that get instantiated\n  isValid: boolean; // This returns whether all of the fields are valid\n  errors: string[]; // This is an array of error messages\n  isDirty: boolean; // This returns whether the form's initial values have changed\n  values: IValues; // This is an object of all of the fields and their values (good for sending to server)\n  showErrors(): void; // This makes all of the fields touched so that the error message shows for each field\n  reset(): void; // This resets the form to its initial values\n}\n")),Object(r.b)("p",null,"You can use each of this methods to interact with the ",Object(r.b)("inlineCode",{parentName:"p"},"Form"),"."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"See the ",Object(r.b)("a",Object.assign({parentName:"p"},{href:"#examples"}),"Examples")," for more information on how to work wit the ",Object(r.b)("inlineCode",{parentName:"p"},"Form")," instance.")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"field"},Object(r.b)("inlineCode",{parentName:"h2"},"Field")),Object(r.b)("p",null,"When a ",Object(r.b)("inlineCode",{parentName:"p"},"Form")," is created, the fields (the schema) that are passed into the ",Object(r.b)("inlineCode",{parentName:"p"},"Form")," constructor are used\nto create a ",Object(r.b)("inlineCode",{parentName:"p"},"Field")," instance. It is possible to access each field by using the field's name:\n",Object(r.b)("inlineCode",{parentName:"p"},"form.fieldName.property")," The ",Object(r.b)("inlineCode",{parentName:"p"},"Field")," instance has some helpful methods and properties: "),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Access to each field is available by using the field name: ",Object(r.b)("inlineCode",{parentName:"p"},"field.name.value"))),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"interface IField {\n  form: IForm; // The Form that the field belongs to\n  name: string; // The name of the field passed in via the schema\n  label?: string; // The field label\n  placeholder?: string; // The placeholder\n  initialValue?: string; // The initial value\n  value?: string; // The current value (computed property)\n  isTouched: boolean; // This is whether the field is touched or \n  validation: string; // The validation string that is passed in\n  isValid: boolean; // Whether or not the field has passed all validations \n  isDirty: boolean; // Does the current value differ from the initial value?\n  hasErrors: boolean; // Does the field have any validation errors?\n  errors: string[]; // The array of errors for the field\n  reset(): void; // Resets the field to the initial value\n}\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"A ",Object(r.b)("inlineCode",{parentName:"p"},"Field")," can be touched and not dirty if the input has changed from the initial value but then\nreverted back to the initial value, for instance:"),Object(r.b)("pre",{parentName:"blockquote"},Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),'// The initialValue is "jon"\nfield.value = \'john\' // The field is now "touched" and "dirty"\nfield.value = \'jon\' // The field is now "touched" but NOT "dirty"\n'))),Object(r.b)("h3",{id:"update-field-value"},"Update ",Object(r.b)("inlineCode",{parentName:"h3"},"Field")," value"),Object(r.b)("p",null,"If you need to update a ",Object(r.b)("inlineCode",{parentName:"p"},"Field")," value, you simply mutate (change) the value like so:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"field.value = 'Some new value';\n")),Object(r.b)("p",null,"That is the beauty of working with MobX \ud83d\udc4d"),Object(r.b)("p",null,"Sometimes it is useful to compare two fields and that is why the ",Object(r.b)("inlineCode",{parentName:"p"},"Form")," instance lives on each field.\nThis is especially helpful for ",Object(r.b)("a",Object.assign({parentName:"p"},{href:"#validation"}),"validation")," because you can do things like this with the ",Object(r.b)("inlineCode",{parentName:"p"},"Field"),"\ninstance."),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const dateValidator = field => {\n  if (moment(field.value).isAfter(field.form.endDate.value)) {\n    return `The start date cannot be after the end date.`;\n  }\n  return undefined;\n}\n")),Object(r.b)("h2",{id:"validation"},"Validation"),Object(r.b)("p",null,"Tiny MobX Form has the most common validations built in and also allows custom validations to be\nadded."),Object(r.b)("h3",{id:"validators"},"Validators"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"required - ",Object(r.b)("inlineCode",{parentName:"li"},"required")),Object(r.b)("li",{parentName:"ul"},"required if - ",Object(r.b)("inlineCode",{parentName:"li"},"required-if:<name of field>")," | ",Object(r.b)("inlineCode",{parentName:"li"},"required-if:last-name")),Object(r.b)("li",{parentName:"ul"},"length (string length) - ",Object(r.b)("inlineCode",{parentName:"li"},"length:<min>,<max>")," | ",Object(r.b)("inlineCode",{parentName:"li"},"length:4,30")),Object(r.b)("li",{parentName:"ul"},"match - ",Object(r.b)("inlineCode",{parentName:"li"},"match:<name of field>")," | ",Object(r.b)("inlineCode",{parentName:"li"},"match:password")),Object(r.b)("li",{parentName:"ul"},"letters - ",Object(r.b)("inlineCode",{parentName:"li"},"letters")),Object(r.b)("li",{parentName:"ul"},"email - ",Object(r.b)("inlineCode",{parentName:"li"},"email")),Object(r.b)("li",{parentName:"ul"},"phone number - ",Object(r.b)("inlineCode",{parentName:"li"},"phone")),Object(r.b)("li",{parentName:"ul"},"postal - ",Object(r.b)("inlineCode",{parentName:"li"},"postal")),Object(r.b)("li",{parentName:"ul"},"number - ",Object(r.b)("inlineCode",{parentName:"li"},"number")),Object(r.b)("li",{parentName:"ul"},"alphanumeric - ",Object(r.b)("inlineCode",{parentName:"li"},"alpha")),Object(r.b)("li",{parentName:"ul"},"size (number between) - ",Object(r.b)("inlineCode",{parentName:"li"},"size:<min>,<max>")," | ",Object(r.b)("inlineCode",{parentName:"li"},"size:50,100")),Object(r.b)("li",{parentName:"ul"},"one of (array list) - ",Object(r.b)("inlineCode",{parentName:"li"},"one-of:<comma separated list>")," | ",Object(r.b)("inlineCode",{parentName:"li"},"one-of:red,blue,green"))),Object(r.b)("h3",{id:"using-validators"},"Using Validators"),Object(r.b)("p",null,"Validators are passed into the form schema and follow this pattern:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{}),"const schema [{\n    name: 'name',\n    validation: 'name-of-validator:all,the,arguments' // Arguments are separated by commas\n}];\n")),Object(r.b)("p",null,"It is also possible to add more than one validator by separating validators by the pipe ",Object(r.b)("inlineCode",{parentName:"p"},"|"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const schema [{\n    name: 'name',\n    validation: 'required|letters|length:2,20'\n}];\n")),Object(r.b)("h3",{id:"custom-validators"},"Custom Validators"),Object(r.b)("p",null,"If you would like to add your own custom validators, then you can pass those to the ",Object(r.b)("inlineCode",{parentName:"p"},"options")," argument\nof the ",Object(r.b)("inlineCode",{parentName:"p"},"Form")," constructor. You would pass them in as an object. The object key is the name of the\nvalidator and the value is the validator:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const additionalValidators = {\n  'file-size': fileSizeValidator,\n};\n")),Object(r.b)("p",null,"As an example, say we want to get the file size of a value and we want our validation to look like\nthis: ",Object(r.b)("inlineCode",{parentName:"p"},"file-size:2")," (that is 2KB). The validator would look like this:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"// The field is passed in so you can get any of its properties. \n// The other arguments are spread into the validator\nconst fileSizeValidator = (field, max) => {\n  if (!!field.value && field.value.size > max * 1024 /* 1,024 bytes in a KB */) {\n    return `The file size is too larger than ${max}KB`;\n  }\n  return undefined;\n}\n")),Object(r.b)("p",null,"Or, say we wanted a range for our file size that would look like this ",Object(r.b)("inlineCode",{parentName:"p"},"file-size:1,4"),". Then our\nvalidator would look like this:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const fileSizeValidator = (field, min, max) => {\n  if (!!field.value && (field.value.size < min * 1024 || field.value.size > max * 1024)) {\n    return `The file size must be between ${min}KB and ${max}KB`;\n  }\n  return undefined;\n}\n")),Object(r.b)("p",null,"And then to add that custom validator, you pass it into the ",Object(r.b)("inlineCode",{parentName:"p"},"Form")," at the time of construction:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const schema = [{\n  name: 'avatar',\n  // This is the validator with the min and max...\n  validation: 'file-size:0,2'\n}]\n\n// The name \"file-size\" is important because that is how it is referenced in the schema above.\nconst form = new Form(schema, {}, { 'file-size': fileSizeValidator });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"examples"},"Examples"),Object(r.b)("h3",{id:"instant-validation-example"},"Instant Validation Example"),Object(r.b)(o.c,{__position:0,__code:"<InstantValidation />",__scope:{props:this?this.props:t,Playground:o.c,InstantValidation:A,OnblurValidation:h},__codesandbox:"",mdxType:"Playground"},Object(r.b)(A,{mdxType:"InstantValidation"})),Object(r.b)("p",null,"Here is the code for the Instant Validation Example above:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{}),"import React from 'react';\nimport { observer } from 'mobx-react';\nimport { TextInputField } from 'evergreen-ui';\nimport { Form } from 'tiny-mobx-form';\n\nconst schema = [\n  {\n    name: 'firstName',\n    placeholder: 'John',\n    label: 'First Name',\n    validation: 'required|letters|length:2,20',\n    initialValue: '',\n  },\n  {\n    name: 'lastName',\n    placeholder: 'Appleseed',\n    label: 'Last Name',\n    validation: 'required|letters|length:2,20',\n    initialValue: '',\n  },\n  {\n    name: 'email',\n    placeholder: 'jon@gmail.com',\n    label: 'Email',\n    validation: 'required|email',\n    initialValue: '',\n  },\n  {\n    name: 'age',\n    placeholder: '22',\n    label: 'Age',\n    validation: 'required|number|size:18,100',\n    initialValue: '',\n  },\n];\n\nconst { fields } = new Form(schema);\n\nfunction InstantValidation() {\n  return (\n    <div>\n      <div>\n        <TextInputField\n          required\n          type=\"text\"\n          name=\"firstName\"\n          value={fields.firstName.value}\n          placeholder={fields.firstName.placeholder}\n          label={fields.firstName.label}\n          validationMessage={fields.firstName.isDirty && fields.firstName.hasErrors && fields.firstName.errors.join(' ')}\n          isInvalid={fields.firstName.isDirty && fields.firstName.hasErrors}\n          onChange={e => (fields.firstName.value = e.currentTarget.value)}\n        />\n      </div>\n      <div>\n        <TextInputField\n          required\n          type=\"text\"\n          name=\"lastName\"\n          value={fields.lastName.value}\n          placeholder={fields.lastName.placeholder}\n          label={fields.lastName.label}\n          validationMessage={fields.lastName.isDirty && fields.lastName.hasErrors && fields.lastName.errors.join(' ')}\n          isInvalid={fields.lastName.isDirty && fields.lastName.hasErrors}\n          onChange={e => (fields.lastName.value = e.currentTarget.value)}\n        />\n      </div>\n      <div>\n        <TextInputField\n          required\n          type=\"text\"\n          name=\"email\"\n          value={fields.email.value}\n          placeholder={fields.email.placeholder}\n          label={fields.email.label}\n          validationMessage={fields.email.isDirty && fields.email.hasErrors && fields.email.errors.join(' ')}\n          isInvalid={fields.email.isDirty && fields.email.hasErrors}\n          onChange={e => (fields.email.value = e.currentTarget.value)}\n        />\n      </div>\n      <div>\n        <TextInputField\n          required\n          type=\"text\"\n          name=\"age\"\n          value={fields.age.value}\n          placeholder={fields.age.placeholder}\n          label={fields.age.label}\n          validationMessage={fields.age.isDirty && fields.age.hasErrors && fields.age.errors.join(' ')}\n          isInvalid={fields.age.isDirty && fields.age.hasErrors}\n          onChange={e => (fields.age.value = e.currentTarget.value)}\n          error={fields.age.isDirty && fields.age.hasErrors && fields.age.errors.join(' ')}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default observer(InstantValidation);\n")),Object(r.b)("h3",{id:"on-blur-validation-example"},"On Blur Validation Example"),Object(r.b)(o.c,{__position:1,__code:"<OnblurValidation />",__scope:{props:this?this.props:t,Playground:o.c,InstantValidation:A,OnblurValidation:h},__codesandbox:"",mdxType:"Playground"},Object(r.b)(h,{mdxType:"OnblurValidation"})),Object(r.b)("p",null,"Here is the code for the On Blur Validation Example above:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"import React, { useState } from 'react';\nimport { observer } from 'mobx-react';\nimport { TextInputField } from 'evergreen-ui';\nimport { Form } from 'tiny-mobx-form';\n\nconst schema = [\n  {\n    name: 'firstName',\n    placeholder: 'John',\n    label: 'First Name',\n    validation: 'required|letters|length:2,20',\n    initialValue: '',\n  },\n  {\n    name: 'lastName',\n    placeholder: 'Appleseed',\n    label: 'Last Name',\n    validation: 'required|letters|length:2,20',\n    initialValue: '',\n  },\n  {\n    name: 'email',\n    placeholder: 'jon@gmail.com',\n    label: 'Email',\n    validation: 'required|email',\n    initialValue: '',\n  },\n  {\n    name: 'age',\n    placeholder: '22',\n    label: 'Age',\n    validation: 'required|number|size:18,100',\n    initialValue: '',\n  },\n];\n\nconst { fields } = new Form(schema);\n\nfunction OnblurValidation() {\n  const [blurredFields, setBlurredFields] = useState([]);\n\n  return (\n    <div>\n      <div>\n        <TextInputField\n          required\n          type=\"text\"\n          name=\"firstName\"\n          value={fields.firstName.value}\n          placeholder={fields.firstName.placeholder}\n          label={fields.firstName.label}\n          validationMessage={blurredFields.includes('firstName') && fields.firstName.hasErrors && fields.firstName.errors.join(' ')}\n          onBlur={() => setBlurredFields([...blurredFields, 'firstName'])}\n          isInvalid={blurredFields.includes('firstName') && fields.firstName.hasErrors}\n          onChange={e => (fields.firstName.value = e.currentTarget.value)}\n        />\n      </div>\n      <div>\n        <TextInputField\n          required\n          type=\"text\"\n          name=\"lastName\"\n          value={fields.lastName.value}\n          placeholder={fields.lastName.placeholder}\n          label={fields.lastName.label}\n          validationMessage={blurredFields.includes('lastName') && fields.lastName.hasErrors && fields.lastName.errors.join(' ')}\n          onBlur={() => setBlurredFields([...blurredFields, 'lastName'])}\n          isInvalid={blurredFields.includes('lastName') && fields.lastName.hasErrors}\n          onChange={e => (fields.lastName.value = e.currentTarget.value)}\n        />\n      </div>\n      <div>\n        <TextInputField\n          required\n          type=\"text\"\n          name=\"email\"\n          value={fields.email.value}\n          placeholder={fields.email.placeholder}\n          label={fields.email.label}\n          validationMessage={blurredFields.includes('email') && fields.email.hasErrors && fields.email.errors.join(' ')}\n          onBlur={() => setBlurredFields([...blurredFields, 'email'])}\n          isInvalid={blurredFields.includes('email') && fields.email.hasErrors}\n          onChange={e => (fields.email.value = e.currentTarget.value)}\n        />\n      </div>\n      <div>\n        <TextInputField\n          required\n          type=\"text\"\n          name=\"age\"\n          value={fields.age.value}\n          placeholder={fields.age.placeholder}\n          label={fields.age.label}\n          validationMessage={blurredFields.includes('age') && fields.age.hasErrors && fields.age.errors.join(' ')}\n          onBlur={() => setBlurredFields([...blurredFields, 'age'])}\n          isInvalid={blurredFields.includes('age') && fields.age.hasErrors}\n          onChange={e => (fields.age.value = e.currentTarget.value)}\n          error={fields.age.isDirty && fields.age.hasErrors && fields.age.errors.join(' ')}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default observer(OnblurValidation);\n")))}O&&O===Object(O)&&Object.isExtensible(O)&&Object.defineProperty(O,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"example/introduction.mdx"}}),O.isMDXComponent=!0},"./example/styles.css":function(e,a,t){}}]);
//# sourceMappingURL=example-introduction.075add154b3526e85520.js.map