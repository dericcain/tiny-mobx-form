(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{"./dist/index.js":function(e,a,t){"use strict";e.exports=t("./dist/tiny-mobx-form.cjs.production.min.js")},"./dist/tiny-mobx-form.cjs.production.min.js":function(e,a,t){"use strict";var n=t("./node_modules/tslib/tslib.es6.js"),i=t("./node_modules/mobx/lib/mobx.module.js");function l(e,a){for(var t=0;t<a.length;t++){var n=a[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function r(e,a,t){return a&&l(e.prototype,a),t&&l(e,t),e}function o(){return(o=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}).apply(this,arguments)}var s=function(e,a){return void 0===a&&(a=""),e?a:void 0},d=function(e,a){return s(!e.value,a||"This field is required.")},A=function(e,a,t){return s(!(e.value&&e.form.fields[t]),a||"The "+e.form.fields[t].label+" field is required since the "+e.label+" field is filled out.")},u=function(e,a,t,n){return void 0===t&&(t=0),void 0===n&&(n=1/0),s(!(e.value&&e.value.length>=Number(t)&&e.value.length<=Number(n)),a||function(e,a){return"Must be at least "+e+" and no more than "+a+" characters"}(t.toString(10),n.toString(10)))},c=function(e,a,t){return s(e.value!==e.form.fields[t].value,a||"The "+e.label+" and "+e.form.fields[t].label+" do not match.")},m=/^[a-zA-Z\s]*$/,b=function(e,a){var t=e.value;return s(!!t&&!m.test(t),a||"Please enter letters only.")},p=/^[\w-.]+@([\w-]+\.)+[\w-]{2,4}$/,g=function(e,a){var t=e.value;return s(!!t&&!p.test(t),a||"Please enter a valid email address.")},h=/^(\()?[2-9]\d{2}(-|.|\))?\d{3}(-|.)?\d{4}$/,B=function(e,a){var t=e.value;return s(!!t&&!h.test(t),a||"Please enter a valid phone number.")},j=/^\d{5}-\d{4}|\d{5}|[A-Z]\d[A-Z] \d[A-Z]\d$/,w=function(e,a){var t=e.value;return s(!!t&&!j.test(t),a||"Please enter a valid postal number.")},v=/^\d+$/,f=function(e,a){var t=e.value;return s(!!t&&!v.test(t),a||"Please enter a valid number.")},O=/^\w+$/,C=function(e,a){var t=e.value;return s(!!t&&!O.test(t),a||"Please do not use special characters.")},E=function(e,a,t,n){var i=e.value;return void 0===t&&(t=0),void 0===n&&(n=1/0),s(!(!i||Number(i)>=t&&Number(i)<=n),a||function(e,a){return"Please enter a number between "+e+" and "+a+"."}(t.toString(10),n.toString(10)))},D=function(e,a){for(var t=e.value,n=arguments.length,i=new Array(n>2?n-2:0),l=2;l<n;l++)i[l-2]=arguments[l];return s(!!t&&!i.includes(t),a||function(e){return"Please choose one of these choices: "+e.join(", ")}(i))},N=function(e){return void 0===e&&(e={}),o({required:d,"required-if":A,length:u,letters:b,email:g,match:c,number:f,phone:B,postal:w,alpha:C,size:E,"one-of":D},e)},F=function(){function e(e,a,t){var n=a.name,i=a.label,l=void 0===i?"":i,r=a.placeholder,o=void 0===r?"":r,s=a.validation,d=void 0===s?"":s,A=a.initialValue,u=void 0===A?"":A,c=t.additionalValidators,m=t.validatorMessages;this.form=e,this.isTouched=!1,this.isFocused=!1,this.name=n,this.label=l,this.placeholder=o,this.initialValue=u,this._value=u,this.validation=d,this.validators=c,this.validatorMessages=m}return e.prototype.reset=function(){this._value=this.initialValue,this.isTouched=!1,this.isFocused=!1},r(e,[{key:"value",get:function(){return this._value},set:function(e){this._value=e,this.isTouched=!0}},{key:"isValid",get:function(){return 0===this.errors.length}},{key:"isDirty",get:function(){return this.initialValue!==this.value}},{key:"errors",get:function(){return t=this.validators,void 0===(a=this.validatorMessages)&&(a=void 0),(e=this).validation.split("|").map((function(n){var i=n.split(":"),l=i[0],r=i[1],o=[];if(r&&(o=r.split(",")),!(l in t))throw new Error("There is no validator with the name of "+l);return t[l].apply(t,[e,a&&l in a?a[l]:""].concat(o))})).filter(Boolean);var e,a,t}},{key:"hasErrors",get:function(){return this.errors.length>0}}]),e}();n.__decorate([i.observable],F.prototype,"initialValue",void 0),n.__decorate([i.observable],F.prototype,"isTouched",void 0),n.__decorate([i.observable],F.prototype,"isFocused",void 0),n.__decorate([i.observable],F.prototype,"validation",void 0),n.__decorate([i.observable],F.prototype,"_value",void 0),n.__decorate([i.computed],F.prototype,"value",null),n.__decorate([i.computed],F.prototype,"isValid",null),n.__decorate([i.computed],F.prototype,"isDirty",null),n.__decorate([i.computed],F.prototype,"errors",null),n.__decorate([i.computed],F.prototype,"hasErrors",null),n.__decorate([i.action("TinyMobxForm | Field | reset")],F.prototype,"reset",null);var Q=function(){function e(e,a,t){var n=this;void 0===a&&(a={}),void 0===t&&(t={}),this.fields={},e.forEach((function(e){n.fieldNames.push(e.name);var i=o({},e,{initialValue:a[e.name]||e.initialValue});n.fields[i.name]=new F(n,i,{additionalValidators:N(t.additionalValidators||{}),validatorMessages:t.validatorMessages||{}})}))}var a=e.prototype;return a.showErrors=function(){var e=this,a=!1;this.fieldNames.forEach((function(t){e.fields[t].isTouched=!0,e.fields[t].isValid||a||(e.fields[t].isFocused=!0,a=!0)}))},a.reset=function(){var e=this;this.fieldNames.forEach((function(a){return e.fields[a].reset()}))},r(e,[{key:"fieldNames",get:function(){return Object.keys(this.fields)}},{key:"isValid",get:function(){var e=this;return 0===this.fieldNames.filter((function(a){return!e.fields[a].isValid})).length}},{key:"errors",get:function(){var e=this;return this.fieldNames.flatMap((function(a){return e.fields[a].errors}))}},{key:"isDirty",get:function(){var e=this;return this.fieldNames.some((function(a){return e.fields[a].isDirty}))}},{key:"values",get:function(){var e=this;return this.fieldNames.reduce((function(a,t){var n;return o({},a,((n={})[t]=e.fields[t].value,n))}),{})}}]),e}();n.__decorate([i.observable.struct],Q.prototype,"fields",void 0),n.__decorate([i.computed],Q.prototype,"fieldNames",null),n.__decorate([i.computed],Q.prototype,"isValid",null),n.__decorate([i.computed],Q.prototype,"errors",null),n.__decorate([i.computed],Q.prototype,"isDirty",null),n.__decorate([i.computed],Q.prototype,"values",null),n.__decorate([i.action("TinyMobXForm | showErrors")],Q.prototype,"showErrors",null),n.__decorate([i.action("TinyMobXForm | reset")],Q.prototype,"reset",null),a.Field=F,a.Form=Q},"./example/introduction.mdx":function(e,a,t){"use strict";t.r(a);var n=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),i=t("./node_modules/react/index.js"),l=t.n(i),r=t("./node_modules/@mdx-js/react/dist/index.es.js"),o=t("./node_modules/docz/dist/index.esm.js"),s=(t("./example/styles.css"),t("./node_modules/mobx-react/dist/mobx-react.module.js")),d=t("./node_modules/evergreen-ui/esm/text-input/src/TextInputField.js"),A=t("./dist/index.js"),u=new A.Form([{name:"firstName",placeholder:"John",label:"First Name",validation:"required|letters|length:2,20",initialValue:""},{name:"lastName",placeholder:"Appleseed",label:"Last Name",validation:"required|letters|length:2,20",initialValue:""},{name:"email",placeholder:"jon@gmail.com",label:"Email",validation:"required|email",initialValue:""},{name:"age",placeholder:"22",label:"Age",validation:"required|number|size:18,100",initialValue:""}]).fields;var c=Object(s.a)((function(){return l.a.createElement("div",null,l.a.createElement("div",null,l.a.createElement(d.a,{required:!0,type:"text",name:"firstName",value:u.firstName.value,placeholder:u.firstName.placeholder,label:u.firstName.label,validationMessage:u.firstName.isDirty&&u.firstName.hasErrors&&u.firstName.errors.join(" "),isInvalid:u.firstName.isDirty&&u.firstName.hasErrors,onChange:function(e){return u.firstName.value=e.currentTarget.value}})),l.a.createElement("div",null,l.a.createElement(d.a,{required:!0,type:"text",name:"lastName",value:u.lastName.value,placeholder:u.lastName.placeholder,label:u.lastName.label,validationMessage:u.lastName.isDirty&&u.lastName.hasErrors&&u.lastName.errors.join(" "),isInvalid:u.lastName.isDirty&&u.lastName.hasErrors,onChange:function(e){return u.lastName.value=e.currentTarget.value}})),l.a.createElement("div",null,l.a.createElement(d.a,{required:!0,type:"text",name:"email",value:u.email.value,placeholder:u.email.placeholder,label:u.email.label,validationMessage:u.email.isDirty&&u.email.hasErrors&&u.email.errors.join(" "),isInvalid:u.email.isDirty&&u.email.hasErrors,onChange:function(e){return u.email.value=e.currentTarget.value}})),l.a.createElement("div",null,l.a.createElement(d.a,{required:!0,type:"text",name:"age",value:u.age.value,placeholder:u.age.placeholder,label:u.age.label,validationMessage:u.age.isDirty&&u.age.hasErrors&&u.age.errors.join(" "),isInvalid:u.age.isDirty&&u.age.hasErrors,onChange:function(e){return u.age.value=e.currentTarget.value},error:u.age.isDirty&&u.age.hasErrors&&u.age.errors.join(" ")})))})),m=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js"),b=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js"),p=new A.Form([{name:"firstName",placeholder:"John",label:"First Name",validation:"required|letters|length:2,20",initialValue:""},{name:"lastName",placeholder:"Appleseed",label:"Last Name",validation:"required|letters|length:2,20",initialValue:""},{name:"email",placeholder:"jon@gmail.com",label:"Email",validation:"required|email",initialValue:""},{name:"age",placeholder:"22",label:"Age",validation:"required|number|size:18,100",initialValue:""}]).fields;var g=Object(s.a)((function(){var e=Object(i.useState)([]),a=Object(b.a)(e,2),t=a[0],n=a[1];return l.a.createElement("div",null,l.a.createElement("div",null,l.a.createElement(d.a,{required:!0,type:"text",name:"firstName",value:p.firstName.value,placeholder:p.firstName.placeholder,label:p.firstName.label,validationMessage:t.includes("firstName")&&p.firstName.hasErrors&&p.firstName.errors.join(" "),onBlur:function(){return n([].concat(Object(m.a)(t),["firstName"]))},isInvalid:t.includes("firstName")&&p.firstName.hasErrors,onChange:function(e){return p.firstName.value=e.currentTarget.value}})),l.a.createElement("div",null,l.a.createElement(d.a,{required:!0,type:"text",name:"lastName",value:p.lastName.value,placeholder:p.lastName.placeholder,label:p.lastName.label,validationMessage:t.includes("lastName")&&p.lastName.hasErrors&&p.lastName.errors.join(" "),onBlur:function(){return n([].concat(Object(m.a)(t),["lastName"]))},isInvalid:t.includes("lastName")&&p.lastName.hasErrors,onChange:function(e){return p.lastName.value=e.currentTarget.value}})),l.a.createElement("div",null,l.a.createElement(d.a,{required:!0,type:"text",name:"email",value:p.email.value,placeholder:p.email.placeholder,label:p.email.label,validationMessage:t.includes("email")&&p.email.hasErrors&&p.email.errors.join(" "),onBlur:function(){return n([].concat(Object(m.a)(t),["email"]))},isInvalid:t.includes("email")&&p.email.hasErrors,onChange:function(e){return p.email.value=e.currentTarget.value}})),l.a.createElement("div",null,l.a.createElement(d.a,{required:!0,type:"text",name:"age",value:p.age.value,placeholder:p.age.placeholder,label:p.age.label,validationMessage:t.includes("age")&&p.age.hasErrors&&p.age.errors.join(" "),onBlur:function(){return n([].concat(Object(m.a)(t),["age"]))},isInvalid:t.includes("age")&&p.age.hasErrors,onChange:function(e){return p.age.value=e.currentTarget.value},error:p.age.isDirty&&p.age.hasErrors&&p.age.errors.join(" ")})))})),h=new A.Form([{name:"firstName",placeholder:"John",label:"First Name",validation:"required|letters|length:2,20",initialValue:""},{name:"lastName",placeholder:"Appleseed",label:"Last Name",validation:"required|letters|length:2,20",initialValue:""},{name:"email",placeholder:"jon@gmail.com",label:"Email",validation:"required|email",initialValue:""},{name:"age",placeholder:"22",label:"Age",validation:"required|number|size:18,100",initialValue:""}]),B=h.fields;var j=Object(s.a)((function(e){var a=e.name,t=e.showErrors;return console.log(B[a]),l.a.createElement("div",null,l.a.createElement(d.a,{type:"text",name:B[a].name,value:B[a].value,placeholder:B[a].placeholder,label:B[a].label,validationMessage:t&&B[a].hasErrors&&B[a].errors.join(" "),isInvalid:t&&B[a].hasErrors,onChange:function(e){B[a].value=e.currentTarget.value},autoFocus:B[a].isFocused?"true":"false",key:"".concat(B[a].name,"-").concat(B[a].isFocused)}))}));var w=Object(s.a)((function(){var e=Object(i.useState)(!1),a=Object(b.a)(e,2),t=a[0],n=a[1];return l.a.createElement("div",null,l.a.createElement("form",{onSubmit:function(e){e.preventDefault(),n(!0),h.showErrors(),h.isValid&&alert(JSON.stringify(h.values))}},l.a.createElement(j,{name:"firstName",showErrors:t}),l.a.createElement(j,{name:"lastName",showErrors:t}),l.a.createElement(j,{name:"email",showErrors:t}),l.a.createElement(j,{name:"age",showErrors:t}),l.a.createElement("button",{type:"submit"},"Submit")))}));t.d(a,"default",(function(){return O}));var v={},f="wrapper";function O(e){var a=e.components,t=Object(n.a)(e,["components"]);return Object(r.b)(f,Object.assign({},v,t,{components:a,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"tiny-mobx-form"},"Tiny MobX Form"),Object(r.b)("h2",{id:""},Object(r.b)("a",Object.assign({parentName:"h2"},{href:"https://coveralls.io/github/dericgw/tiny-mobx-form?branch=master"}),Object(r.b)("img",{alt:"Coverage Status",src:"https://coveralls.io/repos/github/dericgw/tiny-mobx-form/badge.svg?branch=master"}))),Object(r.b)("p",null,"\u270c\ufe0fTiny (~2KB) tree-shakable MobX form library"),Object(r.b)("h2",{id:"features"},"Features"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"\ud83d\udeb6 Small, less than 2KB and tree-shakable"),Object(r.b)("li",{parentName:"ul"},"\ud83d\udcaa Written in TypeScript using MobX"),Object(r.b)("li",{parentName:"ul"},"\u26a0\ufe0f Includes popular validations"),Object(r.b)("li",{parentName:"ul"},"\ud83d\udcdd Can add your own custom validations if needed"),Object(r.b)("li",{parentName:"ul"},"\ud83d\udc53 Accessibility friendly by automatically autofocusing input on validation error"),Object(r.b)("li",{parentName:"ul"},"\ud83c\uddf2\ud83c\uddfd Supports multilingual by allowing custom validation messages to be used")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"installation"},"Installation"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"npm i tiny-mobx-form")," or ",Object(r.b)("inlineCode",{parentName:"p"},"yarn add tiny-mobx-form")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"form"},Object(r.b)("inlineCode",{parentName:"h2"},"Form")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"Form")," class is the main module that makes tiny-mobx-form work. The ",Object(r.b)("inlineCode",{parentName:"p"},"Form")," takes an array of\nobjects that define a ",Object(r.b)("inlineCode",{parentName:"p"},"Field"),". Here are some of the things that the ",Object(r.b)("inlineCode",{parentName:"p"},"Form")," does:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Creates fields"),Object(r.b)("li",{parentName:"ul"},"Observes fields"),Object(r.b)("li",{parentName:"ul"},"Observes values"),Object(r.b)("li",{parentName:"ul"},"Observes whether the field has been touched (the value has been changed)"),Object(r.b)("li",{parentName:"ul"},"Validation"),Object(r.b)("li",{parentName:"ul"},"Validation errors")),Object(r.b)("h3",{id:"form-arguments"},Object(r.b)("inlineCode",{parentName:"h3"},"Form")," Arguments"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"Form")," accepts three arguments: ",Object(r.b)("inlineCode",{parentName:"p"},"new Form(fields, initialValues, options)"),":"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object.assign({parentName:"tr"},{align:null}),"Argument Name"),Object(r.b)("th",Object.assign({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",Object.assign({parentName:"tr"},{align:null}),"Required"),Object(r.b)("th",Object.assign({parentName:"tr"},{align:null}),"Default"),Object(r.b)("th",Object.assign({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"fields")),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"IFormSchema[]")),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"true"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null})),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"This is the definition of each field in the form. (See the ",Object(r.b)("inlineCode",{parentName:"td"},"IFormSchema")," type below)")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"initialValues")),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"{ fieldName: 'value' }")),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"false"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"{}")),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"These are the initial values for each form field.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"options")),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"IFormOptions")),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"false"),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"{ additionalValidators: {}, validatorMessages: {} }")),Object(r.b)("td",Object.assign({parentName:"tr"},{align:null}),"These are extra options that can be passed into the form. (See the ",Object(r.b)("inlineCode",{parentName:"td"},"IFormOptions")," type below)")))),Object(r.b)("h4",{id:"fields-schema--iformschema"},"Fields Schema | ",Object(r.b)("inlineCode",{parentName:"h4"},"IFormSchema")),Object(r.b)("p",null,"Here is the shape of the ",Object(r.b)("inlineCode",{parentName:"p"},"IFormSchema")," type:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),'interface IFormSchema {\n  name: string; // The name of the field (must be unique)\n  label?: string; // The label of the field\n  placeholder?: string; // The placeholder of the input\n  validation?: string; // The validation string ("required|length:2.10|letters")\n  initialValue?: string; // The initial value of the field\n}\n')),Object(r.b)("p",null,"Here is an example of what that looks like:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const schema = [\n  {\n    name: 'firstName',\n    placeholder: 'John',\n    label: 'First Name',\n    validation: 'required|letters|length:2,20',\n    initialValue: '',\n  },\n  {\n    name: 'lastName',\n    placeholder: 'Appleseed',\n    label: 'Last Name',\n    validation: 'required|letters|length:2,20',\n    initialValue: '',\n  },\n  {\n    name: 'email',\n    placeholder: 'jon@gmail.com',\n    label: 'Email',\n    validation: 'required|email',\n    initialValue: '',\n  },\n  {\n    name: 'age',\n    placeholder: '22',\n    label: 'Age',\n    validation: 'required|number|size:18,100',\n    initialValue: '',\n  },\n];\n")),Object(r.b)("h4",{id:"form-initial-values"},"Form Initial Values"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"Form")," can accept initial values as a second argument. This is good to use when you need to query\nan API for the form values and you do not have the values at the time when the schema is created.\nThe ",Object(r.b)("inlineCode",{parentName:"p"},"initialValues")," is an object whose key is the name of the field and the value is the value of\nthat field. Here is an example:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const initialValues = {\n  firstName: 'Ted',\n  lastName: 'Chavez',\n  email: 'ted@email.com',\n  age: 31\n};\n")),Object(r.b)("h4",{id:"form-options--iformoptions"},"Form Options | ",Object(r.b)("inlineCode",{parentName:"h4"},"IFormOptions")),Object(r.b)("p",null,"Here is the ",Object(r.b)("inlineCode",{parentName:"p"},"IFormOptions")," type with the other dependent types. See the ",Object(r.b)("a",Object.assign({parentName:"p"},{href:"#validation"}),"Validation")," section for a\nbetter explanation of adding additional validators:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"interface IFormOptions {\n  additionalValidators?: IValidators; // Your own custom validators\n  validatorMessages?: IValidatorMessage; // Your own custom validator messages\n}\n\ninterface IValidators {\n  [name: string]: IValidator;\n}\n\ninterface IValidator {\n  (field: IField, ...args: any[]): undefined | string;\n}\n")),Object(r.b)("p",null,"Here is an example of what the options would look like:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const options = {\n  additionalValidators: {\n    'file-size': fileSizeValidator,\n    'date': dateValidator,\n  },\n  validatorMessages: {\n     // This will overwrite the \"required\" validator default message \n     required: 'This field is required, for real yo.'\n  }\n};\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"If you want to use your own messages for validators but don't want to write your own, then you\nshould use the ",Object(r.b)("inlineCode",{parentName:"p"},"validatorMessages")," option to pass in the validator messages that should be\noverwritten.")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"After running ",Object(r.b)("inlineCode",{parentName:"p"},"form.showErrors()"),", the first field that has a validation error will have the property\n",Object(r.b)("inlineCode",{parentName:"p"},"isFocused")," set to ",Object(r.b)("inlineCode",{parentName:"p"},"true"),".")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"See the ",Object(r.b)("a",Object.assign({parentName:"p"},{href:"#validation"}),"Validation")," section for more info on custom validators.")),Object(r.b)("h3",{id:"form-methods-and-properties"},Object(r.b)("inlineCode",{parentName:"h3"},"Form")," Methods and Properties"),Object(r.b)("p",null,"A ",Object(r.b)("inlineCode",{parentName:"p"},"Form")," instance has a few methods and properties available that should be used to work with the\nform. Here is the ",Object(r.b)("inlineCode",{parentName:"p"},"IForm")," interface in which the ",Object(r.b)("inlineCode",{parentName:"p"},"Form")," implements:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"interface IForm {\n  fields: IFields; // These are the fields that get instantiated\n  isValid: boolean; // This returns whether all of the fields are valid\n  errors: string[]; // This is an array of error messages\n  isDirty: boolean; // This returns whether the form's initial values have changed\n  values: IValues; // This is an object of all of the fields and their values (good for sending to server)\n  showErrors(): void; // This makes all of the fields touched so that the error message shows for each field\n  reset(): void; // This resets the form to its initial values\n}\n")),Object(r.b)("p",null,"You can use each of this methods to interact with the ",Object(r.b)("inlineCode",{parentName:"p"},"Form"),"."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"See the ",Object(r.b)("a",Object.assign({parentName:"p"},{href:"#examples"}),"Examples")," for more information on how to work wit the ",Object(r.b)("inlineCode",{parentName:"p"},"Form")," instance.")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"field"},Object(r.b)("inlineCode",{parentName:"h2"},"Field")),Object(r.b)("p",null,"When a ",Object(r.b)("inlineCode",{parentName:"p"},"Form")," is created, the fields (the schema) that are passed into the ",Object(r.b)("inlineCode",{parentName:"p"},"Form")," constructor are used\nto create a ",Object(r.b)("inlineCode",{parentName:"p"},"Field")," instance. It is possible to access each field by using the field's name:\n",Object(r.b)("inlineCode",{parentName:"p"},"form.fieldName.property")," The ",Object(r.b)("inlineCode",{parentName:"p"},"Field")," instance has some helpful methods and properties: "),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Access to each field is available by using the field name: ",Object(r.b)("inlineCode",{parentName:"p"},"field.name.value"))),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"interface IField {\n  form: IForm; // The Form that the field belongs to\n  name: string; // The name of the field passed in via the schema\n  label?: string; // The field label\n  placeholder?: string; // The placeholder\n  initialValue?: string; // The initial value\n  value?: string; // The current value (computed property)\nisFocused: boolean; // Used to mark whether a field\n  isTouched: boolean; // This is whether the field is touched or \n  validation: string; // The validation string that is passed in\n  isValid: boolean; // Whether or not the field has passed all validations \n  isDirty: boolean; // Does the current value differ from the initial value?\n  hasErrors: boolean; // Does the field have any validation errors?\n  errors: string[]; // The array of errors for the field\n  reset(): void; // Resets the field to the initial value\n}\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"A ",Object(r.b)("inlineCode",{parentName:"p"},"Field")," can be touched and not dirty if the input has changed from the initial value but then\nreverted back to the initial value, for instance:"),Object(r.b)("pre",{parentName:"blockquote"},Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),'// The initialValue is "jon"\nfield.value = \'john\' // The field is now "touched" and "dirty"\nfield.value = \'jon\' // The field is now "touched" but NOT "dirty"\n'))),Object(r.b)("h3",{id:"update-field-value"},"Update ",Object(r.b)("inlineCode",{parentName:"h3"},"Field")," value"),Object(r.b)("p",null,"If you need to update a ",Object(r.b)("inlineCode",{parentName:"p"},"Field")," value, you simply mutate (change) the value like so:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"field.value = 'Some new value';\n")),Object(r.b)("p",null,"That is the beauty of working with MobX \ud83d\udc4d"),Object(r.b)("p",null,"Sometimes it is useful to compare two fields and that is why the ",Object(r.b)("inlineCode",{parentName:"p"},"Form")," instance lives on each field.\nThis is especially helpful for ",Object(r.b)("a",Object.assign({parentName:"p"},{href:"#validation"}),"validation")," because you can do things like this with the ",Object(r.b)("inlineCode",{parentName:"p"},"Field"),"\ninstance."),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const dateValidator = field => {\n  if (moment(field.value).isAfter(field.form.endDate.value)) {\n    return `The start date cannot be after the end date.`;\n  }\n  return undefined;\n}\n")),Object(r.b)("h2",{id:"validation"},"Validation"),Object(r.b)("p",null,"Tiny MobX Form has the most common validations built in and also allows custom validations to be\nadded."),Object(r.b)("h3",{id:"validators"},"Validators"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"required - ",Object(r.b)("inlineCode",{parentName:"li"},"required")),Object(r.b)("li",{parentName:"ul"},"required if - ",Object(r.b)("inlineCode",{parentName:"li"},"required-if:<name of field>")," | ",Object(r.b)("inlineCode",{parentName:"li"},"required-if:last-name")),Object(r.b)("li",{parentName:"ul"},"length (string length) - ",Object(r.b)("inlineCode",{parentName:"li"},"length:<min>,<max>")," | ",Object(r.b)("inlineCode",{parentName:"li"},"length:4,30")),Object(r.b)("li",{parentName:"ul"},"match - ",Object(r.b)("inlineCode",{parentName:"li"},"match:<name of field>")," | ",Object(r.b)("inlineCode",{parentName:"li"},"match:password")),Object(r.b)("li",{parentName:"ul"},"letters - ",Object(r.b)("inlineCode",{parentName:"li"},"letters")),Object(r.b)("li",{parentName:"ul"},"email - ",Object(r.b)("inlineCode",{parentName:"li"},"email")),Object(r.b)("li",{parentName:"ul"},"phone number - ",Object(r.b)("inlineCode",{parentName:"li"},"phone")),Object(r.b)("li",{parentName:"ul"},"postal - ",Object(r.b)("inlineCode",{parentName:"li"},"postal")),Object(r.b)("li",{parentName:"ul"},"number - ",Object(r.b)("inlineCode",{parentName:"li"},"number")),Object(r.b)("li",{parentName:"ul"},"alphanumeric - ",Object(r.b)("inlineCode",{parentName:"li"},"alpha")),Object(r.b)("li",{parentName:"ul"},"size (number between) - ",Object(r.b)("inlineCode",{parentName:"li"},"size:<min>,<max>")," | ",Object(r.b)("inlineCode",{parentName:"li"},"size:50,100")),Object(r.b)("li",{parentName:"ul"},"one of (array list) - ",Object(r.b)("inlineCode",{parentName:"li"},"one-of:<comma separated list>")," | ",Object(r.b)("inlineCode",{parentName:"li"},"one-of:red,blue,green"))),Object(r.b)("h3",{id:"using-validators"},"Using Validators"),Object(r.b)("p",null,"Validators are passed into the form schema and follow this pattern:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{}),"const schema [{\n    name: 'name',\n    validation: 'name-of-validator:all,the,arguments' // Arguments are separated by commas\n}];\n")),Object(r.b)("p",null,"It is also possible to add more than one validator by separating validators by the pipe ",Object(r.b)("inlineCode",{parentName:"p"},"|"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const schema [{\n    name: 'name',\n    validation: 'required|letters|length:2,20'\n}];\n")),Object(r.b)("h3",{id:"custom-validators"},"Custom Validators"),Object(r.b)("p",null,"If you would like to add your own custom validators, then you can pass those to the ",Object(r.b)("inlineCode",{parentName:"p"},"options")," argument\nof the ",Object(r.b)("inlineCode",{parentName:"p"},"Form")," constructor. You would pass them in as an object. The object key is the name of the\nvalidator and the value is the validator:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const additionalValidators = {\n  'file-size': fileSizeValidator,\n};\n")),Object(r.b)("p",null,"As an example, say we want to get the file size of a value and we want our validation to look like\nthis: ",Object(r.b)("inlineCode",{parentName:"p"},"file-size:2")," (that is 2KB). The validator would look like this:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"// The field is passed in so you can get any of its properties. \n// The other arguments are spread into the validator\nconst fileSizeValidator = (field, max) => {\n  if (!!field.value && field.value.size > max * 1024 /* 1,024 bytes in a KB */) {\n    return `The file size is too larger than ${max}KB`;\n  }\n  return undefined;\n}\n")),Object(r.b)("p",null,"Or, say we wanted a range for our file size that would look like this ",Object(r.b)("inlineCode",{parentName:"p"},"file-size:1,4"),". Then our\nvalidator would look like this:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const fileSizeValidator = (field, min, max) => {\n  if (!!field.value && (field.value.size < min * 1024 || field.value.size > max * 1024)) {\n    return `The file size must be between ${min}KB and ${max}KB`;\n  }\n  return undefined;\n}\n")),Object(r.b)("p",null,"And then to add that custom validator, you pass it into the ",Object(r.b)("inlineCode",{parentName:"p"},"Form")," at the time of construction:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const schema = [{\n  name: 'avatar',\n  // This is the validator with the min and max...\n  validation: 'file-size:0,2'\n}]\n\n// The name \"file-size\" is important because that is how it is referenced in the schema above.\nconst form = new Form(schema, {}, { 'file-size': fileSizeValidator });\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"examples"},"Examples"),Object(r.b)("h3",{id:"instant-validation-example"},"Instant Validation Example"),Object(r.b)(o.c,{__position:0,__code:"<InstantValidation />",__scope:{props:this?this.props:t,Playground:o.c,InstantValidation:c,OnblurValidation:g,OnSubmitValidation:w},__codesandbox:"",mdxType:"Playground"},Object(r.b)(c,{mdxType:"InstantValidation"})),Object(r.b)("p",null,"Here is the code for the Instant Validation Example above:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{}),"import React from 'react';\nimport { observer } from 'mobx-react';\nimport { TextInputField } from 'evergreen-ui';\nimport { Form } from 'tiny-mobx-form';\n\nconst schema = [\n  {\n    name: 'firstName',\n    placeholder: 'John',\n    label: 'First Name',\n    validation: 'required|letters|length:2,20',\n    initialValue: '',\n  },\n  {\n    name: 'lastName',\n    placeholder: 'Appleseed',\n    label: 'Last Name',\n    validation: 'required|letters|length:2,20',\n    initialValue: '',\n  },\n  {\n    name: 'email',\n    placeholder: 'jon@gmail.com',\n    label: 'Email',\n    validation: 'required|email',\n    initialValue: '',\n  },\n  {\n    name: 'age',\n    placeholder: '22',\n    label: 'Age',\n    validation: 'required|number|size:18,100',\n    initialValue: '',\n  },\n];\n\nconst { fields } = new Form(schema);\n\nfunction InstantValidation() {\n  return (\n    <div>\n      <div>\n        <TextInputField\n          required\n          type=\"text\"\n          name=\"firstName\"\n          value={fields.firstName.value}\n          placeholder={fields.firstName.placeholder}\n          label={fields.firstName.label}\n          validationMessage={fields.firstName.isDirty && fields.firstName.hasErrors && fields.firstName.errors.join(' ')}\n          isInvalid={fields.firstName.isDirty && fields.firstName.hasErrors}\n          onChange={e => (fields.firstName.value = e.currentTarget.value)}\n        />\n      </div>\n      <div>\n        <TextInputField\n          required\n          type=\"text\"\n          name=\"lastName\"\n          value={fields.lastName.value}\n          placeholder={fields.lastName.placeholder}\n          label={fields.lastName.label}\n          validationMessage={fields.lastName.isDirty && fields.lastName.hasErrors && fields.lastName.errors.join(' ')}\n          isInvalid={fields.lastName.isDirty && fields.lastName.hasErrors}\n          onChange={e => (fields.lastName.value = e.currentTarget.value)}\n        />\n      </div>\n      <div>\n        <TextInputField\n          required\n          type=\"text\"\n          name=\"email\"\n          value={fields.email.value}\n          placeholder={fields.email.placeholder}\n          label={fields.email.label}\n          validationMessage={fields.email.isDirty && fields.email.hasErrors && fields.email.errors.join(' ')}\n          isInvalid={fields.email.isDirty && fields.email.hasErrors}\n          onChange={e => (fields.email.value = e.currentTarget.value)}\n        />\n      </div>\n      <div>\n        <TextInputField\n          required\n          type=\"text\"\n          name=\"age\"\n          value={fields.age.value}\n          placeholder={fields.age.placeholder}\n          label={fields.age.label}\n          validationMessage={fields.age.isDirty && fields.age.hasErrors && fields.age.errors.join(' ')}\n          isInvalid={fields.age.isDirty && fields.age.hasErrors}\n          onChange={e => (fields.age.value = e.currentTarget.value)}\n          error={fields.age.isDirty && fields.age.hasErrors && fields.age.errors.join(' ')}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default observer(InstantValidation);\n")),Object(r.b)("h3",{id:"on-blur-validation-example"},"On Blur Validation Example"),Object(r.b)(o.c,{__position:1,__code:"<OnblurValidation />",__scope:{props:this?this.props:t,Playground:o.c,InstantValidation:c,OnblurValidation:g,OnSubmitValidation:w},__codesandbox:"",mdxType:"Playground"},Object(r.b)(g,{mdxType:"OnblurValidation"})),Object(r.b)("p",null,"Here is the code for the On Blur Validation Example above:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"import React, { useState } from 'react';\nimport { observer } from 'mobx-react';\nimport { TextInputField } from 'evergreen-ui';\nimport { Form } from 'tiny-mobx-form';\n\nconst schema = [\n  {\n    name: 'firstName',\n    placeholder: 'John',\n    label: 'First Name',\n    validation: 'required|letters|length:2,20',\n    initialValue: '',\n  },\n  {\n    name: 'lastName',\n    placeholder: 'Appleseed',\n    label: 'Last Name',\n    validation: 'required|letters|length:2,20',\n    initialValue: '',\n  },\n  {\n    name: 'email',\n    placeholder: 'jon@gmail.com',\n    label: 'Email',\n    validation: 'required|email',\n    initialValue: '',\n  },\n  {\n    name: 'age',\n    placeholder: '22',\n    label: 'Age',\n    validation: 'required|number|size:18,100',\n    initialValue: '',\n  },\n];\n\nconst { fields } = new Form(schema);\n\nfunction OnblurValidation() {\n  const [blurredFields, setBlurredFields] = useState([]);\n\n  return (\n    <div>\n      <div>\n        <TextInputField\n          required\n          type=\"text\"\n          name=\"firstName\"\n          value={fields.firstName.value}\n          placeholder={fields.firstName.placeholder}\n          label={fields.firstName.label}\n          validationMessage={blurredFields.includes('firstName') && fields.firstName.hasErrors && fields.firstName.errors.join(' ')}\n          onBlur={() => setBlurredFields([...blurredFields, 'firstName'])}\n          isInvalid={blurredFields.includes('firstName') && fields.firstName.hasErrors}\n          onChange={e => (fields.firstName.value = e.currentTarget.value)}\n        />\n      </div>\n      <div>\n        <TextInputField\n          required\n          type=\"text\"\n          name=\"lastName\"\n          value={fields.lastName.value}\n          placeholder={fields.lastName.placeholder}\n          label={fields.lastName.label}\n          validationMessage={blurredFields.includes('lastName') && fields.lastName.hasErrors && fields.lastName.errors.join(' ')}\n          onBlur={() => setBlurredFields([...blurredFields, 'lastName'])}\n          isInvalid={blurredFields.includes('lastName') && fields.lastName.hasErrors}\n          onChange={e => (fields.lastName.value = e.currentTarget.value)}\n        />\n      </div>\n      <div>\n        <TextInputField\n          required\n          type=\"text\"\n          name=\"email\"\n          value={fields.email.value}\n          placeholder={fields.email.placeholder}\n          label={fields.email.label}\n          validationMessage={blurredFields.includes('email') && fields.email.hasErrors && fields.email.errors.join(' ')}\n          onBlur={() => setBlurredFields([...blurredFields, 'email'])}\n          isInvalid={blurredFields.includes('email') && fields.email.hasErrors}\n          onChange={e => (fields.email.value = e.currentTarget.value)}\n        />\n      </div>\n      <div>\n        <TextInputField\n          required\n          type=\"text\"\n          name=\"age\"\n          value={fields.age.value}\n          placeholder={fields.age.placeholder}\n          label={fields.age.label}\n          validationMessage={blurredFields.includes('age') && fields.age.hasErrors && fields.age.errors.join(' ')}\n          onBlur={() => setBlurredFields([...blurredFields, 'age'])}\n          isInvalid={blurredFields.includes('age') && fields.age.hasErrors}\n          onChange={e => (fields.age.value = e.currentTarget.value)}\n          error={fields.age.isDirty && fields.age.hasErrors && fields.age.errors.join(' ')}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default observer(OnblurValidation);\n")),Object(r.b)("h3",{id:"on-submit-validation-example"},"On Submit Validation Example"),Object(r.b)(o.c,{__position:2,__code:"<OnSubmitValidation />",__scope:{props:this?this.props:t,Playground:o.c,InstantValidation:c,OnblurValidation:g,OnSubmitValidation:w},__codesandbox:"N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkmXwldXfTl-nm8GTM6yay1C7Gw836dHI3XcyTgBAEoRSKVgdhGLzw4xsdgqwKwSxmsH83UytkR5lscFCMHW1FSuLe9UQAEozEZJGYIEQZpQBFMAEowVzkKZgIREdidcWS9oAbj5AqFooVBAAIgB5ACy7GlkTlXQlBAAtCciMrVYLhQ5IoLUPpDTK5ThJNhXALYDbUGYxWbdXqcF0MBkABTrZhsMTrCyMPAAZjEjjVzponDVwuy7BxEx6gKJVRBAkQUmTcfMFnYjBmYgjDSmUWSztzrnQLBi1Hi7BmQju40oqRgUxe7DDmH6qBSeZgCQ5Unr8draadLskVYT0ljijMJ16RH0ODSBAAorAjzQAEKJBroCOdYQEdpc1AcpUKZRen0wHCaMgdGoWh6EQFRsymYB2AABSgVxEhSIRQgwdh5FdY12gPAAvP1-TtKZ2g9H8yRgSQUUSLEPjgOBcIgxpUBRdwCAANXiLhogGcwjVlQjPSwb0SIBdN9DgSQ0EYmhzVYNj0A46haPw9gdVQDwoD6VioHY7suLdXjiNgIT1xoUTqFUvopJkuTUAU9UlNQZw3iIF4NK0zj0J4oj-N_QzqBEyRqHpDwnItaTNNk7SbPtQNJXck1NXaMFUF0FFjlOLDnAICj4HYbh2GAdYogEZ5UCudoAAZ2CTGYsHaPdqxmDsWBnUqABZqvYAA2aravWMBgIAMW9aBElK_hnEOBEHUwGChH4JYiGoSg4AahEeurPqaGcCAsMudgAEYWrq-REuSqYAEE5hy9gIyg8gbCgdAw1QjkcrEa7oxkdhyNgbhgGwjKsrgeQtxrYA7ugR7ggAMih8ZEnmShmnBh6nu4NG5TAZDJU49p2AAfg2CGwwjF6rmRyHUGO6spBkKs3zMGFbMwMAwigKYSde97qYu5dqwTaKCBwfrMhSK8CBBmta2UhygucyztPYTcVykAWhZFsWQakHm6bML8QH00jvvgKitAoYD9AYHBHEwPUIAEIQjn7bp8vW4DzXyHarjKnAAE4YFlABCPD1SYlVKcSggvHQZICByF2LAazsCiuLqfFT9gg4g0OzCpvWDZ8jMCFE8SCCYiywqs_9TaAvRQPAxSBdi-UzUiyC9g8OAMlYDJUKbhaPCwc1TUVMPg_tKDLGwAgGlQGZwn6iB5xyNDuLlGBu6Kro6HNUIID9W1bKg_qhVlFfdJwD0L53FF96SgKpjgO7_dcK6AG11njmtUG9Xb2kgAQUQADkf5rUlmSCUMBhgPQyKVAAUpQPA1k6qSzgoEKApUF4AKmMAo8oCayhVctQUqXQACOu8ujoAAD6wBuBkOA1C6ApAmIgAATIoFhZU8EWDQC8CA8QNIMlKngpQH8VzfyPKVOCQCQHIJrOAhEUCpylR5liII6AuHsFQfOUqAAZfw2CZErgIeFTixCYBkLttkBhtCAEMJnMwthHCNE8JiPw-Igi5TCNkZ_Cw4jf7P2gBo-RkDKDQLLHKdQ1AAACotXDQA-JEDRWj0FyjPFEQJsiLDGKsmYixFDKEBKgM41AvC3FqV_l40RfN2B-NKq4NIQS4IKNCUouULCWFJNcGg5RDTMnsGydpXJ5CrGoFCEQQIAhKEe0uHtAAHIoPaZVOF9JcXwqAAiKmyJEagAAumHMwp08qGkXg9OwaFcrOjGMfAQRAIyP02FED8iVMZJQVjPCSLF5acQ5p_LoBA-jmCjNUmMsgVwJlpmCmsjBJ5YGnrPeeJz0CQslqQ4ZSLqmSwsJleYfAQC0FhfwZFX8f64v_tIo8hKMWYtCgyX6kAl5wBwGSggOC_w0pgFTTFmLgmKIyHSxFjLmWspwDylpGROVcprMk_lDKmV23JX-ZJErJX9K-dQPU8AKhpBlacuVWDhW2C1HbTK7AYbHNlUKn--B_BnntkKOwZr6W6stUeHAGQHaMsiWgR8coOTKslbYGexidXoEFfKllVrDXGuSI6gVeqFXWrgLaj1_quXUHsH4GcMBfrdG4G9CMTrQ3xoja69lV0_y9HtvoSwrgiqjhwOyv1RKlZUpprGSFIKJaYuhVPGec8CALyXkSiwqLLHopVVi-G2b-D4tECAYdNSSX8CkSWxk86qWS3ZSGxlK7hXstTdyppISwnbpwLuq1oqwkHpQV0-cp7z2uqVQugZnENXUXqdm4Ahad36INXAI1woY2w2_We39Vq_BJrtQA01wG40Pr_O6-1_5KDetxq-a9NZA2oGDV-uDYHXVRsAzB81ur4OJuTfajDFh02Zu1cAXN-aQNkbLblCtfQwwEBrXWwWjaMMtq5W20FraIUbtrDCuF_bB0PQXaOihC7sXTrxVPSlE7F1HlxYUlTE6t24dlYUht7iOULsvVOU9-mTPioXdK3Tur9NPtE1ktVqA31as_SB_ThGTWxr0-kqA5GoMOtgz5uJfnEMAOQ6h31VHOBwCDTJMzvmcCeaAyRot-mIMUYAdFmj7g6MMeuu5xLLHoQfHY9W2tp4DPlKbaJ_j3adxCYEyJlVPbYV9oRUOhzE5zFovk1O3Fs6tMqr8bij9Q3JU6ZAx-qrDJosWYEKe6b83ovWam2kUDaDosvvVZqj9i31vJeI2tv8GWAtHbjdNsLnqUOoB9ehhdWGcPHaS_-6N53ZXTdOymhdOWs05s5gWi763itsarTQLjlXeMLrC_tv8h3vO6s-zas7COi2XYCxF27aGasqrq5LQTXaCfrCeeHf0zosCKWZqzA4Hcu6RneaXGgLkTHUBJ3nLyglPhGSLv5FSakBDl0IagKugFdAgQMGBMeGozRLCgnkGAGUsi91Xs3EeB9x7t07gIDeyvdL90HsPF8o86IT17fCgdiLdcYXXhkRCQRUA7z3vskpJv2DXNPk3K-V8WA32d4c-5z835VMlrUjG4bWWNIgby8J7R4GIM6d0uUmCUoR76dtkqcU8lWJobQWxsB7F4FYew5ZK5VllI8e0Sp1YfFqd_vByPzSwnKLmKo7ICftFyj0Snwx1T09DLHdY3P9D89MML44kv1Sy_rMM0IrZ3ixE_1KoUhvx7WntEiagGJiXPjt5Se0NJIWNF98z2igpvnimlOn-U2f6xtkWBr6H9oH6V_R9Ku03fPSYBH6c_3_JozxkZBTLbQzLzKLIT6SxT4bI37VjbJ7InT3xHLfq9wXIwBXInx3JPyPLO4vLYzMjKRmQCDM5WQ_LrCHKvwEEUJSahpLCdwEDXj86UECo7JXTy6K60ARivw7Ik7rB_IApcz47NbdqCECbibtYW6daqaybZB9Y4ozrKbrqqYjb8AuprrPqGanoqEzZGZdbzYaHh4XpHrR4ra3pQB6H6pWr2aqbp4uZ7bAAUHZBUGMpoDkBqTlCPgqGvjvbOr6Gupfb2peFFqaFXaY53Y44TrUD0F9C_Qcx5pfSjiRFVroCOEcEXw4D2FJECpLB_w-Ff5cHRaPbxZ2EMEOFxrOGuHwDuE5GeGo5hrmG-HI7fZda_Z5YA4gaaEg6lZg6cYVb1pQ61ZdrbjCFQpDH46iHm5UEyY9ZjoyGKaDYKETpKEgDwbjZcqTZ4YJr7rGaGFioLY2ZFpkbLZWYmH3r4aKomFbZOY2F0bpGOFJZJTlFwCPj14vQ1GgYJp-HQavFkbBFepY5RY_aoAJHREvSxG0EJGMEMopEXw3GZFyj155EPaxbYaFEwmyplGhBuHtDPEBE_rvENGUYAkZq5afr5aA6yrMaGblqdEcYQ69GGZhFcp45QoNYDG1gjFQpjGSaIqTFZ7joToKYDbyELqLGabzEqprHBbxKbE6HbEnp7GMrmaylTjGFoIJYhYbbzgXEVzaRXGfqom6romYnL4vFBa2aJYfGBapYKmJY_E3ahHZaAn87AmcxgnFEZGQmvypH6nUFrzn4IldYFFhS_TelOH3EYkVHtDGk4lurmn4lZaEm0YkmtFxr6YdGVo0k9E8b0l8aslE7CbtqiatYSYdbSZdZSF8kqoClyEEpimSqLFja1mrHqHyk4DTbSmqa6EtlLZKmWZdarZA5nGbZqHamvq7bXFum3GGkRnP4mlWmtnrYWnRno4eohHY4OlAnAAxFvSullbumnJQlpETmwlP4NL-mqaBlcDBlHlolhmYkzlLkLlxlAwJnEn_axFkmI7A6UmsbUnlbcZaEMmSow5dkHavZEavFI6QYeoPkIYY6_H2nNq5ksnKzIXVgk5UwMwU5MwwAsyhBsya504CARj4H85EHaRs5KD6wc4GRc6-TGS86BTBSC4s7C4ATaBi4WyS50QCyy65CdxsHdBnwYSG6txHKUC07a49xCU8T65DzxTO5S5HLu5W4eSXweg-5G7q5tycklnLxNw26bz26O63z-6YEvy5TvzV4L4SJh51Ff59LzZwIIJIIrjJIYLhrsCp5GI_4n4D4550J2Kj5F5OIrIlKuJX4V5V737WV16nEv47HN4kSdxt59JuWd76KeU96bo-Xyi8mD4BUj4OLF4X7hVQGeJz7B7Eo2WRnn4OU9kx4b5b7qk76pUmGlQH4ZLeUjlEK-X5LL6hWX5lWV4VVWXVKP7P51VR4JVtIdKtWJ7tBnS9JdVC6_4jJjITJAGexzILJLIlVrJDVV5wFk6HJ9Q3JXSXJu7oEB5YEHIIFQRIHnKGgnzYFYwKxUE3S140HDAjCZZnIvSfzJShKKqUApAfmhqvx-JcFhwWA4EKyhAzDhQwARgwD_UrjfoQ0_w7JaFUnpl_mQ6GbQ2oQ8Gjh8FAoCEFkiFm5ckSGSpVlKY1lEojbykY1HhY1-IYYSmnIs0wBY3tmSqdno2Q0ir1UYb9kMrc1Y2WETaXFjmfpfTfW_U4kS3-bQU1HK22mRb3aiYXk8DABwAK0o6mng1C0WkYbNGfrw2I0YZhARDHy9BwDbrK22B23y45AEwzpohrpXDKHxCdz8AYbbAwCJC_TFAAAkzNQt7N5o4dgtmNL2Ltnc6A8gxQB6TJeZFg6F8BDEUwOoEl3ce5OQuU4lWuG8EYVB3BqAsNbk0sjkLwJB1YZB-towv1NBo4zgBtHqzBuUrBpc7BLMUAncFdMNr1bkjFddKNeUK4f4Ts3cNAWoOF1OJMhNFgtB7dzdAWEYqIDIJOksp1RAOATdP1G9O9mGzQBaJ8L2zOqNVK8QGQBAEYsCzgOogCB9qIBQEAYAiQ59NyWhcAHIJ9FgEqGF1YvBAggKys7JjAe9ew9ktdBAv0Y9BAwMRKjAudJdJRS8tepKOR_A8t69HqCDHdlGisrJCYaDdOBdWDy6pxuDh9v1hD-DxDTJ-O5DkllDIpvmtDRDACDDR9KaJDKDrD-dVBVDIADZeDfD9qvDv1aEzDUKHg4QEQ5gdNiD4gMswUUgCjNw1ASFe9hOqFGdYcwDjM9oVOeFNO6DRFNdssBAFFygGlYk4YGg1cHFdcZg7Q8uX0b9ioiUH910_Ypwmqbq2GOAgCOoWoZ4AA-meIAsxDlOjO0AE-gKELgdZNfRYAtMk7AG6lhcKHYLlFIY-B6DEKgIkOaLJXvR8JoCKkIMk6kzgE5KxTRG-GhPOJ3JPdWJk3hQhrk0XFdIU7xCU2UxUxfeQNU5gN3FAJQDMGLFXK-DnLrJRQ40M-U-JYPJU2M4ykkyk9pA02gCLuxebG4yAJ4yiP0JKPwEqNJEcNmoUzOnAJpB4PwByIoPA3cyAPrs80qFXcyERTAK8xyF-kKBGNcxONwGVEqAIIwILIVXgJCwANTwuAugsQDcAECvwCB7IQDBNjIZBdI_TYt0C4uZCqQwCUKUIBx7SKDYu6CQApB9D4vZoBxlR7ggDsr8BoCcAwwRjYsjD9ClykvcDMsvO53qBbCCzMxoAwDQQDh31f3_PYuB2JDUt-ryA_O0jI2vMqvACgPKMwx_M1MiAiBToAvUv6uasQAvMcrqt7Akw6sk1gMRiUDcCiviutnUQQApCoDkvqvI2AunUgu1rjDcB7RKgECMAVa4vGRnqMITBhuIvItBsLaRtixwCvwEB7IBsoucDmACAciuuSiGsRAKaJo6gjCoAyvTNysfDxBQARgCAqvcswCvwQA7LcACAtt5G6vQjyAcitkt5f0TC2CKApsiR-qguoDcC-v_O2P2v_JgP9IoY5BlRoxovcvwOEogBWt4wECICsBLvsBlRKCuBTsj3UCauzvdu3YBxsqGavPkv8DWC2CpYxbda8k4DPNKAO3Ttat5tzt8HXvI1aEwx_iVPo2YsvMEAPsgDWDdD8DwugcX3geS0mHwu4OFqvvllfTOHdATBwcgAIcalQBocgAvvPuQAJC5j7AftbtKCmE_sECKANuWv_sLv7tcCHursCDcsLZlQvPsfLursQDcuoszyQBhWJAvOAe3vlIgdaExsF5iDcCALrWRh5tyfsoKej6MDKeqdEWWuQc-tnu3YzuAu6v8B6h5BTCBAhBTDkgpTwcwAkchAoSoDDgLRdD4juDsDwcEDOd3S1pmh0L-31s4ARAZTTig2LIvPYvhdv0zgRjRf_1KChCnuvLfIztMdmcOvmAmdaEBxoyIc_3IdaH3uUKPubA-cEeDnzjOeVBVeEdgcCoYsodoLOcnA1IiDsBRAEB3Q0d-qKA8CSAAB6r8rg5oWEZ05oAAWrwLwHADskYKHZIIoOQGl6kxe4m0cAtjJwyJCzlzUhGAHAHNx1DAHOgGF_APfXm2V_wLBOKO0_oD3P5dBtQEkP10oGANwCN-_LwCMOaDgDsvC1EhwXN_90D3NzgByPC79-D8AGwi1PIMt4oKwOt9pJt8AKCzt1oft_O7l0dydzDAHGAJdyiPW4Z-VyAPdxSNCHoEcC_MYtCL5iEJ2F0NRB94oHgN98N1GLwCTHjK_CwuaD7DsnN-gPD_IBGOaJQjgOV7wP_XjGL8AEmJL9L1D4r7wOL4j8jzMGjxlwC5j0m9wLtzALjwBwT6dwHHgKT9dxT3d_Z90E9_T6qmFH2MMM6DUnpxz0QNz0rwAKzyDmhK-I9y_i8B-UKvxTfTei-a-R8zfMFi9x_R9i_I_B0Mdbdgsm9m8LvXuE9nf720Bk83dQeU_U-Pd08hAu8ceCiMRQCe8AECAc-RO--a_wvI8eB6_numeG_bfG849XsW9E-RM2_k-3dU8O-0-56V-M__4TIc8pAt8jBt8rfMSd8mcG9Y99_srZ_4_HeW8pAj_F_Qdl_dAddudTCnPzDkBrIbCBeSh0Ic8jBr8XtMfaugvOtZ_dsCecdoynf1vgv8cD2K7NGMJyhg8tuAYnFxJJ0UCAcA4lAclipwb5OsOQSnU7ogImTICdOlrMrun1Y7-hx-D3R3hXxfiz8e4gQAgCMHtwNcnOuDerr5xI40dJejfOLpF0S58dqWYXSgBFwKBsD_6A3QBM_275ZsjeJvaltwFHbRtYWigZ1hdTOj2x4IPLMQCwjxgQBzQLCRAOwJPYsIlQrgRgBAB0EJtKAY3NQW2wkFFwxueyAfnvyJ6UA7iLhcMo8SP6UJp22XPHvb0IEbBhA7TXyHsGaB4d2md0FDAiHuDUCQic0Krn6mQEDdtggg1wXwW_7ADjeTbX6L22kE3RyyiAVwKy3LLmgP6_ARAHAEUCwtEAUAIoaOCHyIByAigQpHu0UA9c7oiAUIDAL06IAPAigGYO70uAzB2hS0UuOgmVbxAOhrgRAMxEUDTJEAIwVlr5HNCIx8hgCJQCjSUCWBn-_rYztCBf5_sUWaLHAH4mkHbDkkMA7gAkNXaUBFe86JAJQBHbbD5sYwo4UANXauAzh-QrIaYSzLdVUAigVLscLRhQAnhSAUoTwEFiQE72a3b4dwHQB_DEAiwL7o30ai8IewV-LSPahR7tsqsSIgQLqTgBhsCQTKE-Mb1eY4jbAlgNoE_B4CUsCRtgeOqcFdpCsqWQ7RlCNggAUif0qpD4fSOFpTUT0hQ9kcCPKTcAqh7IyJlugFE4j083AJoeyIGRSMwAzItEeFCFCYijh8gbttPSEDFsp0oYeAKOBWHABBRW6HkWFX2p3seRcAYkSk02Bki6RhIuAAnWyC0ilAEATVq_GABKtEA_AdliAEUCnhEAvrOIQuz1GGYv2o4H0cZz9a6icRQo9QjO2tFmjSRQrI9koBdFB03RKgOAMzjmjejfReAn_mixxHBFYW8gRMa6I5ZgVMoGY4MVmO7YGjBqhmArrmMpH7oixyY_gFdnLG7tKxB3BbJKPljIiwRm9esYyilEYjZaf9ddncI47sDkaA4vtungPpkg66_ASnn2yiAzAC0oYlju_24DYtlomke-vkOeaHCjBZUHZFcKMF7QTxDtTgkqA_oRhXA3LB2q4DnG7iowno55i8wDgRhaQubf-hMCEBjALqmWF8bB087Ps3OVfeUUcHzB4g8OteXwQ13fA78JwENLGrMDJBf0G2r8GdjDC_HjAd2yElMfwCxq6A4g99P-n6j7YUdc8EYa8MIHJAITQWmXAQIWMUBJiRo_AC0m2JDHpdz2fo5RnmIxywsxACYrgtUMl4fg_wkTSJpgCoCZB2C6bHAMXS7iMsTxlgItsa3mCsteRDIOaAkKtY4BJJ0koUFkA4KCxFJ2uZSYoFUkBN1RGkksbGItE6SgBekgyVsCMlyTTJedCyVZLVHqT_mJY20Uik9G6Tqh-kqSa5NklI15JZk6SKSxUlqSFMrLdPI5InHOSwpMk4yVFM8mxTLJ8Uk1vwEjHlJkpy7VKYZIikmSEkAocINkDinWTfJiUwzHNFGQLgQpLk9Ke5Iqn9pqpOU2qQlJLHpjPRTUqACVPCkZTBYXOKqegBqk-TepqYgDGWIGl4UhpLUtKW5MiljTHQE0qaUaxmmtiFpzUiSStLKnyTxptASad1Oml5SQAHEvaUtIOmlTRprZDbo-zQCJA9QazZSpQjdyW5PpbPUcM8y2k2S_JggLUXOmaELgrmQbfqDqJtZI1GJGfVFvSKub3C0YBAMccAFSFgi_-uxVIeyO_QpCQpp1M8BKDwBrjuJJnQFti0LSsotmeQEmX-D8QfgJ23ASgDdAWEsStJlwdFvTMxrks4cho8vByg_CUzmuwuSGtwAuqWAeWMAliXCO0hlJ0R9wbYKF1lmcR5ZEE-hJQnRn8cexw499GkHuCN8hxmI8lujN7ZmzQW8DVUdtKnSITBYdDALDqIYkDjXmtI7EZSKpk_xBUQoImXdFJkbc_2oHZrpixez2S7RzLAmUHKxq2Bmc5LEvkBxK7O1qRideMS7OFZmzXmmo2go7KDbZpEZuMxFNTNxECAfZJM31pewO6BzxaGbTOaOBJjpzHR_zZ0cWPAAFzPZnEjsXjyUgeAxWhbJVo8XzkMpVWLE5udHJkjtzQxGfXOQSEQmJCB5D0QuZRMjBlzeJN7OVFXKjlpiZIvbLThMGYmsSUxu0r0RWInk99oQA422TiI9lHhBUcEAgHqFmB-z0e5czuZXK5rVyrsZspsWxNmnRpx5ZMu1k7MRlVjL5rc6-QfUiBI1l52Y1-eDWrnJZP5w85sWy0MxwA_5G3SeefOAXuzQFxsChCk0gWhjGOmwoNvoO7Ysz0ZWrCMOAK1ktc--JXdlCqwG5azCxIkjlEvTukjT2p0Uxlq_TRCSgTx_UXKbZJbkMoiph7YaW1LWkdTNpigQRT1MulXz4AjUxaRItWnlSTpXUuRRdOEWjywoyi_aaFPuntSNFZ0rRdbOEWHzBpqio6etMqmnSBFQioGcln0W3TDFnCqRSYocXyLhF7KVBTdOsUPSzQ3yZ6aUzekeAAAGh9Ika_V_psixxay3tkeoXFAS9qUEvPYhLXp4lSJSfHYA_SQZsSsxYDOyH5L_F1Q3poyioLcBLAZS_CBUrxH9Qw4jwAAMRfQJoMAe-XMAKAABVEUDojRYvTVmA8c0Bs2qbbN6mjTKuA01mCLN7GtgAgJIBWYjMf6mzHABM3nDTNZmbFM2LXAlwgAPG7TM5rEE0pk4LZDzCAB4H6ZTEugj4IuI81fBhxQW-uS5VnkfD657lzyNYWFPE7StZWwoReP3MzKkgBwf9DpjDSFDXRs2uUCFpwFrB9hgVO8uFpwATagr8EQbcoOQH6AzAIgRwXKAEzuCdtl6xweABiogBYqhQOLI8CS1gBXR0VmK7FRSrxaktcln0_up3EJW0rSV9K2lp6wZZMrcoW9U3qXjPruiGppHTlhyrJV5siVj8OleSr5YvBGWV0AVYSoLYSscKUrStrCEyib1AV0qklZKpwBKslgEq7FSfSpjAMbWkTDFeKFoD2ApEjxRwNnT4XYqgVRrTVYUK8YcRyA7q9JpwDPq1SfV7AL5Rqt-UxAKijqs5js3JXeL_mcKt1cCpPp-M7kvdWIIGuDXOhNVd9f5RGAjVb1JQQoGgimu9UJrCa3bXNc6qFBGMPlZMoNVPDoChp66FgSJnWowD5Mu5PcwWP4HyBetmVhoNYTqu4y-qwVRwQNkcAgBXRQ2MKxgCECKhRsi4CKpUEiqRYorsqRwOAG0quhmC02rbZ3FylOoQqg2SrHNq0r6AIgh1mKJNaqscWlty2mawDDWwSB3I2lSwJVv_RXW01Myr8JVl3RPUCAEQX6oOkdRVQHp_UwDFFAd1LjcZCa8gXdd1k7nNrYU9axlKhKSCb0CQSwLdZnROU5yoMV0GGVBh5ZQUC13XWWr6qTXXzXM8TXKLpPfUUaP0V0SvNBsSgjoDutgTLPjBI16zugVwZCJK2dDoAjGzuUFnqDPDOBnAZ0AAOKiarovyK5dkCuA2tyyjamsN2wq7kdLcz7csjR2g2yJyyTQBTWsL01gAIwmAeYOGBoB6I0ESwZJOetU0wdKuuDeFkSrM2YALNJhdgE5vQ4aa7AWHfIElFw4ObSOTm5JB5qq5kc7AFHWADkGo6XNb8siYoX2prWwsIwjTeaK4CwC2aDuFnKzuwBs7RBNED3KYI5u66ctPNpHermBI84BbvOxWqID4DK239Mg9_ABLFpgKyJ6hheRLak267RBfZBwnrb1xsAzhLN84TLZ3Iq74dQtIWhrXQKC0DbwYw29zQ1rP5dcOt2muLesBe4hCbWW25TSxvG0ECaeTvArTYjsBvdEg62tresBqFdaFYhSPbXBr4LuCjtxA8CUzxCws9IY7PVrYA1kQdDfIBmmtf9udAPa7NJ_Sfj3AZ4yQ3ePg0gY3x-2oQ_tvQ-IIDu6018-hoOrLYdvL5T8odrvdHb2Dh2Xbft6wOHajoVhw7MdB28Hcdrx0ccidCOu_CECgBDDydbkQYX4Cp1Pbsdp_YcOfz4rdBloWwG_gFya1D5idiO9YOMNu2j1gCKWtAGloy3vqwdE_WnfXwmS5bRwlA4ILVtK1hbZtoWuraFv4AS6mdvkHUGADZ3MhzdxmwUKEjG3c7wdgQpaN0B8GIx8QWozwbEHgDe05tduvzPBVqi-omNlMB5Umzk2F0ZdvzCPWDXmikaUVKogjcT0RSldONlG8luwBE1ibJNomzUbyRJjoUw923CPRCFyiKaS9xmwtHHq43GqYALm_QFQVZS-rE9DsI7gT0LTY0zUx3DvU13Fqmb61DenBSJLT30aM9We8TVJucB560UTQMGkXP3ro1-95m8QvPLjr9aO9NmwvWYFBaws8Naw5LVXpH1pB5oCunrUrs_jkbOWq7RdilNo1X7D2Ie9YORvS1Uab9xU2jS_tyiQCJOj-kBhXKT3t6U9ZaVHPJ131KdPKeneXe-ACKgHY2eIHThAaQF1b_61e9PZ9PH056p9yWiZSwJ4HRdFdnA7gQlyS5b7kSRwDrXvprUdbY9R-2NR1oKCN6f4ze__a3o71lo6xqWefWvK5r0GZwjB1mqnro1pBe1GByfVMsG1z719Ke3vTwd61DaUg_BnmkR3_qCbt9QbHRGeEsCWAzwIoZwFdB-7jdJuM3ObgtyW6SAi9J2ofJQe627bImXQGUbQd9WgtisdhnCjj2Jovyk9AcYA7DADgaGtDOhqfYX3vqNpUDo-9A6Jon257dtKhnOBYbPB6gzoDQHRPodG5g8AeQPEHrD3NAQ9eAUPGHukZ2Tw9FA2vcw2oZubM8y9aw-7a4bABsJHDKK5w9-SDX2GWE7hv_Z4db3HcfDGcBI0kZ0Qj9QjtBkQ5EcwMxkQsBe1Q2QZggAAJZ-lE0ARdK9Q14HQ6kd5789BewvGPuLxYSq8ZecvBXkrxV5S8ZeHIDXlryR5lHpjwO3NFHvMA3GIwtRpMGEbSBOGg2Lh-w0mHaP7a-CYWAnj0YDjQQ5jgCBY0sZWMihBj9JF490DH2jGxDDx2I6HvKMwQdQzgSwGdBSO5QRu_vQPsH3kCh9gA4fJPtseJM-dY-UfbY8twsME66-VRoHcjrra1HDoDRz-E0fKRXQmT3xx7Quz-PdHKSXe6CKifRMDHgjgbarNCZGPZ74TDJyY3EeROLHljqxrE8NzF7L8LDcO6wxTsgO1G_e0Jt40cA-M4U_eXJlvcCz5Psmu9Cp8E5CfFPDHYTUp3PZTsRMwbkTGJoE2dFSNg81TyJjneZTuPM6hhjx-wx1D1ONH3jzR2ox1BNMsGzT3h_k74bdMzGzoNp7ehKftNRGp9vp2U0iemPTJNTsunaEGZwoAB2aEyfo-Fn79TLvBkByfsPFn2jT-s-o01f00aa8zZqFb_u4RNnP96MVsyuCN1f7K6UAzs9yfMC8m4zFp3wxGHQGRhG07AcA82bNQzmiKc5hA8gbTMRGHTU-6ZFAcIPxcou7As_XudYEkGpj7_Z0BbvzPW6Lzxm2o_MhZPrA2TNZ3KHeYbOuwR1oLSJvnk3WzrU2CK0kLRPOqoF2AcgzIF_S_PBA3oLCDjRBfMDmh2A0Fr2C8yDVHrco2glC0HVhWwXF1kTJVsiprz-7X4uFzC_BZYQ_qt1RF79SOdNNEVzTNZrvf7rsEPExTqZu05uYzMKSbzEYf3c6Zeo1qBkkCxFEsCNkjjhLOskFRfrPoiWuN-TXs05PfXSXXMba3jeqv40jm2TQuNtWwacxPi667QShO8o6PxCnMjKFcY_Lchimhc56z8-nlDo7jxw1GnS_ZfvrtBEAr4PpNlW1LgqXztl5y6_GPEeWawZgjk75fnHotzxsGxzPTyKhtqrxzG0-tdDMHnqLAjwdgDMcqDUqYJW6vsF2tzBoBIUFWNtWYN0suXFAhlyWGBoStt6hxx6ocWRPfVYo8Af4mpMBcAkTaQJdgMCTVagke7YJ7u4rUOIAZE0ycq64Y45a8u6ylLxGGq5y0Usfo7ABMOa_rNfhDjmCQiQlV_3EsrWdZKEgdpZfVlLBX4h-oQ0oeInRBbxMVxE4AwonQAqJNEoGu4Cw0aX1ZV58wHVdvFJw5ZiI9WWRrPoqyERZFfwtfr7PVJ_r38b69ECBt5QXTMBeK92wQ0gQG1NeDIW-zRR9JcqaKXIWAFcuo2x0TQVKnAauBSDXK5QuhETdJsAI-kN2wpH0g61XAOtfSMneroyAOVOhVwG4w5QZPs2GTfSX01cF9N9Jpd0ydG9MMRg42bdcWz7fCPBuA2AEpB5EyIz4CoBjATSySdBB6VRNImPIMwDa2U02t3qe9JYLUaNutHrLQbPxLWbcO7CiUtR0OiFpfP2GiOgViwPbZaM4U7b7m4G0AI42V52AVwW2wcJtv2HQ682S2yTxuFEpQ7Dt921HbksTifbuMf28HYjuiZbb6eMO3KKsjO3wJVkMO6HXTte347BMX20nfdvp5s7ttjmRnY5nZ2q70dsAKHTrtx3l2Cdv227YbsczCVoLMG2rMhvQZ67bRnuxDexWFCiUS17KAPczvYrMRhK3GTkrL3PUVwJo0OZHtZWCrqkJogKXht9rr3JY7Ii2xch_iz2cRrt5JMfcpFR2-w9Vc-6GRrHsncondpexGOKyP2N7oopzFdHTw32p7UNoe7LaxFP2GxOszEZ_eAcjj1LQbSJrVKuhUFHFsGqBz5JrlTA6T3W36ffXPUBj77-ISka_b3sxiSRFo7ewPV3s1hN7Sc3MGXp3vQb4H1qrIHaq7Vl0hL7AZ0SuFdFVcPRfSb0f6dPAPafj_o5-wTRXBM6V6wY_07QRYsT0a8jVykQVOfPVmSHeDnB6aIIcUPxgntQlUA1lysPkxVXXRVwDmgrguHNrHh8ldHPYOFSAkuA6_ohZCPJbNeNhyWLmmJADH1SIx2sJMcNWzH1Y0qpSQ4PdjykGjux9o5GhVdD5hj0R8Y9rmmPNr2pJGvSKWD-P0RmIhJ-_Ymt_1AnbW99Q46ulPkXHksNxzWo8dSOvH_ElcmAYf22OYCUNOGwdyoJGMl6EcM5e8FalqLX4-uBSVlNgAnivpS8eJbo_5kRU10wlpyc7luXnK3Fkijgu0-4XZSenD0Pp3ZJUeBThnKU0Z004metPpnnTnmksFgcxqlg_k8h8s7f3iK1njzDZ0dK2cl0LJczi7vs_YdOZwhuks5-M5aeXO1mHT657M72faLY1-Ujhyc744vPmnh0jKe088W7OU99zkVYVM9Ge9wZjT85287BcfOIXtzhZ6mP6lLArFwLi5yi4HjSL7FkL3p9C5_mAZwhOLxF689BdyTwXG0ol-i9JeHz4XQ03F8i9peov6XXUxl784Oc5OiNLWuF5S7JxjOQXRiyKe07SVY5LAL0sJVgCiUiM8ltBV8N05-fmK_nwM2ghS5UVCbIZ89swCrbVsa3JJ2tyuv2t9X630C36JYBzI9XTNtIEl7ykcEib0ilV08-K12eui2uWz8l4p969yjoyMnQq66Pa84iyXqNvryFKG4CgyaYbFVj1-Y-4OhpY3hKtot7OJnmXmQ3FhNZ45dcgKl4hcuePrWzfTMGRTByK6irHUDONkV0W16_DxVlvWavaht3cTvt7cE3UVlqyMHdUcmW1SNpQHGruBaPta1bmfDmzbeMgqUvbCt02rnnG1UC7qnYZjSAtXJEUjx-J12_dXDuVUf98S1cHevRuGIrZT66rOHv-EM9Ws7O-PZCGHvBxYDmS72vRmQpp3Qjs1fFc_PQPco7uOB_FYQdGsD63DLS2sMSX2oHtn5-kdBf5XuuRrlb6YHAGcCjgE6RDtlYA7DQFvPZRckuZm8BQMzc3EHpN2myFpEilnSq9R4rEkDsAEPUwGCcyhzaM8MOlA45ChAiAxYt766ucKsC4hJyYGXnKUNyRg8QEz6AcPN7YDaOx0BDejnIF3ogxUeE6pj2dwSDE8iy46ic-2qo-VVEoZPiH7j_yvUfPvX31D397VKQevXus4js286_pFJg3XtgCt3O4XnpvfZut3D8U_htWeCPytNBw0-qQvuYCND00LavtVl0T4h1-xzo-UI4K_FnDiJ-46ieePu2V6vuWhuwWDyMnv2rJ-F8xdjzXxrjmL4U7i_FPwPBIFqDZ4AcCeVNEG_N6vrAWLyiKznpg5474fmBhP9IlqB56I-bywohK66wiusdpfEdGXkJy2ICx5OawBT7rUU8hRFfbAfvUrzO5KcpfqvxsMALfI6XYfroLnolG54JDGnxPShq7N1-ej9eB3YXob2S_mnRfd23Dgr1N8gf0iOoc3jtwt7Q9LfGU66o8Ot8_ENfinTXoNfd_a8qfSxiQQ775_jeZPTvvu3xaN4sDjeFYk3qlNN7gDFnHv5X37_Z4w94KEQn38KBSEY6155PqqZ1327gDaCnvv3hG0htZnGroguPpYI8eJ-QfobRthnxLQ5P0j6ze33mne1rWIbW1LCK65ihO-g-awQDapzB-7bu56nFdUV3i45cEuZn2TSNfwt2cX1SX36J5yM6pdiv3FUzzl3Yu5ffu1fkX7Vwi5FfrP2XErvX51LOmXUf6pLyTyb9Zda_Zflvgl2i8N-8vQnI3oVzq-d8W_dfbvrlzb49_qu-Xzin36b7MAy__fbTq3zItt_71SXUPiP077N9IuaXrv3AFK8fAyvQlWSqJSB4AQquVfdvz3_wEL9ReWX0v83xn4D9Z-Nu7QXP5koiVRK0HxfhPxi7QeO-K6JjedYrdudhxe_dSs6l-8XvK3JALS9daevaWoTulvS_paU0GXrNRm4zG3FMxmbHhqmK4mZSABWjbBpsmgagKLiOa7LP4_APxPkKq4_Biw1QDIOaANijf3RdCTiJf_4Dex3_j_kACapf9IAquHp_IL-DQg1FKfx16UzIkC5geQAUDdYZoOaDX-fwKWCf-6SPgK-6qgNgBVwn_kvqua1_Eoq_-NePwDYQr_iADDce0DgBfGLCND5VchuIQHEBUZosg4AZUBQH8AnzL_78AxpntBfGDATl6SwTAWsxyUZoNQG0BpAYwH6wG8Hbjbwu8NQFtee0D7A4Ae0MIGiu1ASQF0BnAX0j8AhuJaCRAigbQEf-8xOap6wN_t4AJIQ5gfyH-qAMf47KDAPlBKYPoFkD7iOgAF4wAfAZKDmgqEv7QKAhYkAA",mdxType:"Playground"},Object(r.b)(w,{mdxType:"OnSubmitValidation"})),Object(r.b)("p",null,"Here is the code for the ",Object(r.b)("inlineCode",{parentName:"p"},"OnSubmitValidation")," example:"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Note how we can autofocus on the first field with a validation error. We use a combination of the\n",Object(r.b)("inlineCode",{parentName:"p"},"autoFocus")," and ",Object(r.b)("inlineCode",{parentName:"p"},"key")," prop in order to place focus. This way we don't have to deal with ",Object(r.b)("inlineCode",{parentName:"p"},"ref"),"s.")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"import React, { useState } from 'react';\nimport { observer } from 'mobx-react';\n\nimport { Form } from '../../dist';\nimport { TextInputField } from 'evergreen-ui';\n\nconst schema = [\n  {\n    name: 'firstName',\n    placeholder: 'John',\n    label: 'First Name',\n    validation: 'required|letters|length:2,20',\n    initialValue: '',\n  },\n  {\n    name: 'lastName',\n    placeholder: 'Appleseed',\n    label: 'Last Name',\n    validation: 'required|letters|length:2,20',\n    initialValue: '',\n  },\n  {\n    name: 'email',\n    placeholder: 'jon@gmail.com',\n    label: 'Email',\n    validation: 'required|email',\n    initialValue: '',\n  },\n  {\n    name: 'age',\n    placeholder: '22',\n    label: 'Age',\n    validation: 'required|number|size:18,100',\n    initialValue: '',\n  },\n];\n\nconst form = new Form(schema);\nconst { fields } = form;\n\nfunction Field({ name, showErrors }) {\n  console.log(fields[name]);\n  function update(e) {\n    fields[name].value = e.currentTarget.value;\n  }\n  return (\n    <div>\n      <TextInputField\n        type=\"text\"\n        name={fields[name].name}\n        value={fields[name].value}\n        placeholder={fields[name].placeholder}\n        label={fields[name].label}\n        validationMessage={ showErrors && fields[name].hasErrors && fields[name].errors.join(' ')}\n        isInvalid={showErrors && fields[name].hasErrors}\n        onChange={update}\n        autoFocus={fields[name].isFocused ? \"true\": \"false\"}\n        key={`${fields[name].name}-${fields[name].isFocused}`}\n      />\n    </div>\n  );\n}\n\nconst ObservedField = observer(Field);\n\nfunction OnSubmit() {\n  const [showErrors, setShowErrors] = useState(false);\n\n  function submit(e) {\n    e.preventDefault();\n    setShowErrors(true);\n    form.showErrors();\n    if (form.isValid) {\n      alert(JSON.stringify(form.values));\n    }\n  }\n\n  return (\n    <div>\n      <form onSubmit={submit}>\n        <ObservedField name=\"firstName\" showErrors={showErrors} />\n        <ObservedField name=\"lastName\" showErrors={showErrors} />\n        <ObservedField name=\"email\" showErrors={showErrors} />\n        <ObservedField name=\"age\" showErrors={showErrors} />\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n}\n\nexport default observer(OnSubmit);\n")))}O&&O===Object(O)&&Object.isExtensible(O)&&Object.defineProperty(O,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"example/introduction.mdx"}}),O.isMDXComponent=!0},"./example/styles.css":function(e,a,t){}}]);
//# sourceMappingURL=example-introduction.04bedbc2ec0aa3a4d67d.js.map